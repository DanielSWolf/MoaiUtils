//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Cpp.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace CppParser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class Cpp : Parser {
	public const int
		Scope=1, LeftParen=2, RightParen=3, LeftBracket=4, RightBracket=5, LeftBrace=6, 
		RightBrace=7, Less=8, LessEqual=9, Greater=10, GreaterEqual=11, LeftShift=12, 
		RightShift=13, Plus=14, PlusPlus=15, Minus=16, MinusMinus=17, Star=18, 
		Div=19, Mod=20, And=21, Or=22, AndAnd=23, OrOr=24, Caret=25, Not=26, Tilde=27, 
		Question=28, Colon=29, Semi=30, Comma=31, Assign=32, StarAssign=33, DivAssign=34, 
		ModAssign=35, PlusAssign=36, MinusAssign=37, LeftShiftAssign=38, RightShiftAssign=39, 
		AndAssign=40, XorAssign=41, OrAssign=42, Equal=43, NotEqual=44, Arrow=45, 
		Dot=46, Ellipsis=47, Class=48, Struct=49, Union=50, Enum=51, TypeDef=52, 
		Template=53, TypeName=54, Namespace=55, Using=56, IntLiteral=57, FloatLiteral=58, 
		CharLiteral=59, StringLiteral=60, BoolLiteral=61, IntType=62, Modifier=63, 
		AccessSpecifier=64, Preproc=65, LineComment=66, BlockComment=67, Whitespace=68, 
		ObjectiveCDirective=69, LinkageSpecification=70, CommonMacro=71, Id=72;
	public const int
		RULE_file = 0, RULE_topLevelStatement = 1, RULE_declaration = 2, RULE_typeDef = 3, 
		RULE_usingDirective = 4, RULE_functionDefinition = 5, RULE_classDefinition = 6, 
		RULE_baseClause = 7, RULE_constructorDefinition = 8, RULE_destructorDefinition = 9, 
		RULE_memberInitializerList = 10, RULE_memberInitializer = 11, RULE_declarator = 12, 
		RULE_type = 13, RULE_typeSpecifier = 14, RULE_templateParamsBlock = 15, 
		RULE_templateParam = 16, RULE_templateArgsBlock = 17, RULE_templateArg = 18, 
		RULE_nestedNameSpecifier = 19, RULE_bracesBlock = 20, RULE_bracketsBlock = 21, 
		RULE_parensBlock = 22, RULE_blockContent = 23, RULE_expression = 24, RULE_expressionWithoutAngleBrackets = 25;
	public static readonly string[] ruleNames = {
		"file", "topLevelStatement", "declaration", "typeDef", "usingDirective", 
		"functionDefinition", "classDefinition", "baseClause", "constructorDefinition", 
		"destructorDefinition", "memberInitializerList", "memberInitializer", 
		"declarator", "type", "typeSpecifier", "templateParamsBlock", "templateParam", 
		"templateArgsBlock", "templateArg", "nestedNameSpecifier", "bracesBlock", 
		"bracketsBlock", "parensBlock", "blockContent", "expression", "expressionWithoutAngleBrackets"
	};

	private static readonly string[] _LiteralNames = {
		null, "'::'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
		"'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
		"';'", "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'", 
		"'class'", "'struct'", "'union'", "'enum'", "'typedef'", "'template'", 
		"'typename'", "'namespace'", "'using'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Scope", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
		"LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", 
		"LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
		"Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", "Tilde", 
		"Question", "Colon", "Semi", "Comma", "Assign", "StarAssign", "DivAssign", 
		"ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
		"AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", "Arrow", "Dot", 
		"Ellipsis", "Class", "Struct", "Union", "Enum", "TypeDef", "Template", 
		"TypeName", "Namespace", "Using", "IntLiteral", "FloatLiteral", "CharLiteral", 
		"StringLiteral", "BoolLiteral", "IntType", "Modifier", "AccessSpecifier", 
		"Preproc", "LineComment", "BlockComment", "Whitespace", "ObjectiveCDirective", 
		"LinkageSpecification", "CommonMacro", "Id"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cpp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Cpp(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Cpp.Eof, 0); }
		public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftBrace) | (1L << Semi) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << Namespace) | (1L << Using) | (1L << IntType))) != 0) || _la==Id) {
				{
				{
				State = 52; topLevelStatement();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 58; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public TypeDefContext typeDef() {
			return GetRuleContext<TypeDefContext>(0);
		}
		public UsingDirectiveContext usingDirective() {
			return GetRuleContext<UsingDirectiveContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public ConstructorDefinitionContext constructorDefinition() {
			return GetRuleContext<ConstructorDefinitionContext>(0);
		}
		public DestructorDefinitionContext destructorDefinition() {
			return GetRuleContext<DestructorDefinitionContext>(0);
		}
		public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public ITerminalNode Namespace() { return GetToken(Cpp.Namespace, 0); }
		public ITerminalNode Id() { return GetToken(Cpp.Id, 0); }
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterTopLevelStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitTopLevelStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStatementContext topLevelStatement() {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelStatement);
		int _la;
		try {
			State = 88;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; typeDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62; usingDirective();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63; functionDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 64; classDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 65; constructorDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 66; destructorDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 67; Match(LeftBrace);
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftBrace) | (1L << Semi) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << Namespace) | (1L << Using) | (1L << IntType))) != 0) || _la==Id) {
					{
					{
					State = 68; topLevelStatement();
					}
					}
					State = 73;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 74; Match(RightBrace);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 75; Match(Namespace);
				State = 77;
				_la = TokenStream.La(1);
				if (_la==Id) {
					{
					State = 76; Match(Id);
					}
				}

				State = 79; Match(LeftBrace);
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftBrace) | (1L << Semi) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << Namespace) | (1L << Using) | (1L << IntType))) != 0) || _la==Id) {
					{
					{
					State = 80; topLevelStatement();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 86; Match(RightBrace);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 87; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 90; Match(Template);
				State = 91; templateParamsBlock();
				}
			}

			State = 99;
			switch (TokenStream.La(1)) {
			case Scope:
			case IntType:
			case Id:
				{
				State = 94; typeSpecifier();
				}
				break;
			case Class:
				{
				State = 95; Match(Class);
				}
				break;
			case Struct:
				{
				State = 96; Match(Struct);
				}
				break;
			case Union:
				{
				State = 97; Match(Union);
				}
				break;
			case Enum:
				{
				State = 98; Match(Enum);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 101; declarator(0);
			State = 104;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 102; Match(Assign);
				State = 103; expression();
				}
			}

			State = 106; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(TypeDef);
			State = 110;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum))) != 0)) {
				{
				State = 109;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 112; type();
			State = 113; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_usingDirective);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(Using);
			State = 116; Match(Namespace);
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 117;
					MatchWildcard();
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 123; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 125; Match(Template);
				State = 126; templateParamsBlock();
				}
			}

			State = 129; type();
			State = 130; bracesBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(Cpp.Id, 0); }
		public BaseClauseContext baseClause() {
			return GetRuleContext<BaseClauseContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_la = TokenStream.La(1);
			if (_la==TypeDef) {
				{
				State = 132; Match(TypeDef);
				}
			}

			State = 137;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 135; Match(Template);
				State = 136; templateParamsBlock();
				}
			}

			State = 139;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 144;
			_la = TokenStream.La(1);
			if (_la==Scope || _la==IntType || _la==Id) {
				{
				State = 140; typeSpecifier();
				State = 142;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 141; baseClause();
					}
				}

				}
			}

			State = 146; bracesBlock();
			State = 148;
			_la = TokenStream.La(1);
			if (_la==Id) {
				{
				State = 147; Match(Id);
				}
			}

			State = 150; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseClauseContext : ParserRuleContext {
		public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		public BaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterBaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitBaseClause(this);
		}
	}

	[RuleVersion(0)]
	public BaseClauseContext baseClause() {
		BaseClauseContext _localctx = new BaseClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(Colon);
			State = 153; typeSpecifier();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 154; Match(Comma);
				State = 155; typeSpecifier();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDefinitionContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(Cpp.Id, 0); }
		public ParensBlockContext parensBlock() {
			return GetRuleContext<ParensBlockContext>(0);
		}
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public MemberInitializerListContext memberInitializerList() {
			return GetRuleContext<MemberInitializerListContext>(0);
		}
		public ConstructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterConstructorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitConstructorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDefinitionContext constructorDefinition() {
		ConstructorDefinitionContext _localctx = new ConstructorDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_constructorDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 161; Match(Template);
				State = 162; templateParamsBlock();
				}
			}

			State = 165; typeSpecifier();
			State = 166; Match(Scope);
			State = 167; Match(Id);
			State = 168; parensBlock();
			State = 170;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 169; memberInitializerList();
				}
			}

			State = 172; bracesBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorDefinitionContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(Cpp.Id, 0); }
		public ParensBlockContext parensBlock() {
			return GetRuleContext<ParensBlockContext>(0);
		}
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public DestructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterDestructorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitDestructorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DestructorDefinitionContext destructorDefinition() {
		DestructorDefinitionContext _localctx = new DestructorDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_destructorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; typeSpecifier();
			State = 175; Match(Scope);
			State = 176; Match(Tilde);
			State = 177; Match(Id);
			State = 178; parensBlock();
			State = 179; bracesBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberInitializerListContext : ParserRuleContext {
		public MemberInitializerContext[] memberInitializer() {
			return GetRuleContexts<MemberInitializerContext>();
		}
		public MemberInitializerContext memberInitializer(int i) {
			return GetRuleContext<MemberInitializerContext>(i);
		}
		public MemberInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberInitializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterMemberInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitMemberInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public MemberInitializerListContext memberInitializerList() {
		MemberInitializerListContext _localctx = new MemberInitializerListContext(Context, State);
		EnterRule(_localctx, 20, RULE_memberInitializerList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(Colon);
			State = 182; memberInitializer();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 183; Match(Comma);
				State = 184; memberInitializer();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberInitializerContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(Cpp.Id, 0); }
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MemberInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterMemberInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitMemberInitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberInitializerContext memberInitializer() {
		MemberInitializerContext _localctx = new MemberInitializerContext(Context, State);
		EnterRule(_localctx, 22, RULE_memberInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 190; Match(Id);
				}
				break;
			case 2:
				{
				State = 191; typeSpecifier();
				}
				break;
			}
			State = 194; Match(LeftParen);
			State = 203;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockComment - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)))) != 0)) {
				{
				State = 195; expression();
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 196; Match(Comma);
					State = 197; expression();
					}
					}
					State = 202;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 205; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
	 
		public DeclaratorContext() { }
		public virtual void CopyFrom(DeclaratorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public BracketsBlockContext bracketsBlock() {
			return GetRuleContext<BracketsBlockContext>(0);
		}
		public ArrayContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}
	public partial class GroupContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public GroupContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
	}
	public partial class FunctionContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ParensBlockContext parensBlock() {
			return GetRuleContext<ParensBlockContext>(0);
		}
		public TemplateArgsBlockContext templateArgsBlock() {
			return GetRuleContext<TemplateArgsBlockContext>(0);
		}
		public FunctionContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}
	public partial class ReferenceContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ReferenceContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}
	public partial class PointerContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public PointerContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterPointer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitPointer(this);
		}
	}
	public partial class NameContext : DeclaratorContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(Cpp.Id, 0); }
		public NameContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		return declarator(0);
	}

	private DeclaratorContext declarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclaratorContext _localctx = new DeclaratorContext(Context, _parentState);
		DeclaratorContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_declarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				_localctx = new PointerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 208; Match(Star);
				State = 209; declarator(3);
				}
				break;
			case 2:
				{
				_localctx = new ReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 210; Match(And);
				State = 211; declarator(2);
				}
				break;
			case 3:
				{
				_localctx = new NameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 215;
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 212; typeSpecifier();
					State = 213; Match(Scope);
					}
					break;
				}
				State = 218;
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 217; Match(Id);
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new GroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220; Match(LeftParen);
				State = 221; declarator(0);
				State = 222; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 233;
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new ArrayContext(new DeclaratorContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_declarator);
						State = 226;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 227; bracketsBlock();
						}
						break;
					case 2:
						{
						_localctx = new FunctionContext(new DeclaratorContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_declarator);
						State = 228;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 230;
						_la = TokenStream.La(1);
						if (_la==Less) {
							{
							State = 229; templateArgsBlock();
							}
						}

						State = 232; parensBlock();
						}
						break;
					}
					} 
				}
				State = 237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; typeSpecifier();
			State = 239; declarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(Cpp.Id, 0); }
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public TemplateArgsBlockContext templateArgsBlock() {
			return GetRuleContext<TemplateArgsBlockContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(Cpp.IntType, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeSpecifier);
		try {
			State = 249;
			switch (TokenStream.La(1)) {
			case Scope:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 242;
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 241; nestedNameSpecifier();
					}
					break;
				}
				State = 244; Match(Id);
				State = 246;
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 245; templateArgsBlock();
					}
					break;
				}
				}
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; Match(IntType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamsBlockContext : ParserRuleContext {
		public TemplateParamContext[] templateParam() {
			return GetRuleContexts<TemplateParamContext>();
		}
		public TemplateParamContext templateParam(int i) {
			return GetRuleContext<TemplateParamContext>(i);
		}
		public TemplateParamsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterTemplateParamsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitTemplateParamsBlock(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamsBlockContext templateParamsBlock() {
		TemplateParamsBlockContext _localctx = new TemplateParamsBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_templateParamsBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(Less);
			State = 260;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << Class) | (1L << TypeName) | (1L << IntType))) != 0) || _la==Id) {
				{
				State = 252; templateParam();
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 253; Match(Comma);
					State = 254; templateParam();
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 262; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Id() { return GetToken(Cpp.Id, 0); }
		public ExpressionWithoutAngleBracketsContext expressionWithoutAngleBrackets() {
			return GetRuleContext<ExpressionWithoutAngleBracketsContext>(0);
		}
		public TemplateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterTemplateParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitTemplateParam(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamContext templateParam() {
		TemplateParamContext _localctx = new TemplateParamContext(Context, State);
		EnterRule(_localctx, 32, RULE_templateParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			switch (TokenStream.La(1)) {
			case Scope:
			case IntType:
			case Id:
				{
				State = 264; type();
				}
				break;
			case TypeName:
				{
				State = 265; Match(TypeName);
				}
				break;
			case Class:
				{
				State = 266; Match(Class);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 270;
			_la = TokenStream.La(1);
			if (_la==Id) {
				{
				State = 269; Match(Id);
				}
			}

			State = 277;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 272; Match(Assign);
				State = 275;
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 273; type();
					}
					break;
				case 2:
					{
					State = 274; expressionWithoutAngleBrackets();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgsBlockContext : ParserRuleContext {
		public TemplateArgContext[] templateArg() {
			return GetRuleContexts<TemplateArgContext>();
		}
		public TemplateArgContext templateArg(int i) {
			return GetRuleContext<TemplateArgContext>(i);
		}
		public TemplateArgsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterTemplateArgsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitTemplateArgsBlock(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgsBlockContext templateArgsBlock() {
		TemplateArgsBlockContext _localctx = new TemplateArgsBlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_templateArgsBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(Less);
			State = 288;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << LessEqual) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockComment - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)))) != 0)) {
				{
				State = 280; templateArg();
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 281; Match(Comma);
					State = 282; templateArg();
					}
					}
					State = 287;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 290; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionWithoutAngleBracketsContext expressionWithoutAngleBrackets() {
			return GetRuleContext<ExpressionWithoutAngleBracketsContext>(0);
		}
		public TemplateArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterTemplateArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitTemplateArg(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgContext templateArg() {
		TemplateArgContext _localctx = new TemplateArgContext(Context, State);
		EnterRule(_localctx, 36, RULE_templateArg);
		try {
			State = 294;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293; expressionWithoutAngleBrackets();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedNameSpecifierContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(Cpp.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(Cpp.Id, i);
		}
		public TemplateArgsBlockContext[] templateArgsBlock() {
			return GetRuleContexts<TemplateArgsBlockContext>();
		}
		public TemplateArgsBlockContext templateArgsBlock(int i) {
			return GetRuleContext<TemplateArgsBlockContext>(i);
		}
		public NestedNameSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedNameSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterNestedNameSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitNestedNameSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public NestedNameSpecifierContext nestedNameSpecifier() {
		NestedNameSpecifierContext _localctx = new NestedNameSpecifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_nestedNameSpecifier);
		int _la;
		try {
			int _alt;
			State = 306;
			switch (TokenStream.La(1)) {
			case Scope:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; Match(Scope);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 297; Match(Id);
						State = 299;
						_la = TokenStream.La(1);
						if (_la==Less) {
							{
							State = 298; templateArgsBlock();
							}
						}

						State = 301; Match(Scope);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 304;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracesBlockContext : ParserRuleContext {
		public BlockContentContext blockContent() {
			return GetRuleContext<BlockContentContext>(0);
		}
		public BracesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterBracesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitBracesBlock(this);
		}
	}

	[RuleVersion(0)]
	public BracesBlockContext bracesBlock() {
		BracesBlockContext _localctx = new BracesBlockContext(Context, State);
		EnterRule(_localctx, 40, RULE_bracesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(LeftBrace);
			State = 309; blockContent();
			State = 310; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketsBlockContext : ParserRuleContext {
		public BlockContentContext blockContent() {
			return GetRuleContext<BlockContentContext>(0);
		}
		public BracketsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterBracketsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitBracketsBlock(this);
		}
	}

	[RuleVersion(0)]
	public BracketsBlockContext bracketsBlock() {
		BracketsBlockContext _localctx = new BracketsBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_bracketsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(LeftBracket);
			State = 313; blockContent();
			State = 314; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParensBlockContext : ParserRuleContext {
		public BlockContentContext blockContent() {
			return GetRuleContext<BlockContentContext>(0);
		}
		public ParensBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parensBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterParensBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitParensBlock(this);
		}
	}

	[RuleVersion(0)]
	public ParensBlockContext parensBlock() {
		ParensBlockContext _localctx = new ParensBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_parensBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(LeftParen);
			State = 317; blockContent();
			State = 318; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContentContext : ParserRuleContext {
		public BracesBlockContext[] bracesBlock() {
			return GetRuleContexts<BracesBlockContext>();
		}
		public BracesBlockContext bracesBlock(int i) {
			return GetRuleContext<BracesBlockContext>(i);
		}
		public BracketsBlockContext[] bracketsBlock() {
			return GetRuleContexts<BracketsBlockContext>();
		}
		public BracketsBlockContext bracketsBlock(int i) {
			return GetRuleContext<BracketsBlockContext>(i);
		}
		public ParensBlockContext[] parensBlock() {
			return GetRuleContexts<ParensBlockContext>();
		}
		public ParensBlockContext parensBlock(int i) {
			return GetRuleContext<ParensBlockContext>(i);
		}
		public BlockContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterBlockContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitBlockContent(this);
		}
	}

	[RuleVersion(0)]
	public BlockContentContext blockContent() {
		BlockContentContext _localctx = new BlockContentContext(Context, State);
		EnterRule(_localctx, 46, RULE_blockContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Semi) | (1L << Comma) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockComment - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)))) != 0)) {
				{
				State = 324;
				switch (TokenStream.La(1)) {
				case Scope:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Semi:
				case Comma:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Class:
				case Struct:
				case Union:
				case Enum:
				case TypeDef:
				case Template:
				case TypeName:
				case Namespace:
				case Using:
				case IntLiteral:
				case FloatLiteral:
				case CharLiteral:
				case StringLiteral:
				case BoolLiteral:
				case IntType:
				case Modifier:
				case AccessSpecifier:
				case Preproc:
				case LineComment:
				case BlockComment:
				case Whitespace:
				case ObjectiveCDirective:
				case LinkageSpecification:
				case CommonMacro:
				case Id:
					{
					State = 320;
					_la = TokenStream.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				case LeftBrace:
					{
					State = 321; bracesBlock();
					}
					break;
				case LeftBracket:
					{
					State = 322; bracketsBlock();
					}
					break;
				case LeftParen:
					{
					State = 323; parensBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public BracesBlockContext[] bracesBlock() {
			return GetRuleContexts<BracesBlockContext>();
		}
		public BracesBlockContext bracesBlock(int i) {
			return GetRuleContext<BracesBlockContext>(i);
		}
		public BracketsBlockContext[] bracketsBlock() {
			return GetRuleContexts<BracketsBlockContext>();
		}
		public BracketsBlockContext bracketsBlock(int i) {
			return GetRuleContext<BracketsBlockContext>(i);
		}
		public ParensBlockContext[] parensBlock() {
			return GetRuleContexts<ParensBlockContext>();
		}
		public ParensBlockContext parensBlock(int i) {
			return GetRuleContext<ParensBlockContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 333;
				switch (TokenStream.La(1)) {
				case LeftBrace:
					{
					State = 329; bracesBlock();
					}
					break;
				case LeftBracket:
					{
					State = 330; bracketsBlock();
					}
					break;
				case LeftParen:
					{
					State = 331; parensBlock();
					}
					break;
				case Scope:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Class:
				case Struct:
				case Union:
				case Enum:
				case TypeDef:
				case Template:
				case TypeName:
				case Namespace:
				case Using:
				case IntLiteral:
				case FloatLiteral:
				case CharLiteral:
				case StringLiteral:
				case BoolLiteral:
				case IntType:
				case Modifier:
				case AccessSpecifier:
				case Preproc:
				case LineComment:
				case BlockComment:
				case Whitespace:
				case ObjectiveCDirective:
				case LinkageSpecification:
				case CommonMacro:
				case Id:
					{
					State = 332;
					_la = TokenStream.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Semi) | (1L << Comma))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockComment - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithoutAngleBracketsContext : ParserRuleContext {
		public BracesBlockContext[] bracesBlock() {
			return GetRuleContexts<BracesBlockContext>();
		}
		public BracesBlockContext bracesBlock(int i) {
			return GetRuleContext<BracesBlockContext>(i);
		}
		public BracketsBlockContext[] bracketsBlock() {
			return GetRuleContexts<BracketsBlockContext>();
		}
		public BracketsBlockContext bracketsBlock(int i) {
			return GetRuleContext<BracketsBlockContext>(i);
		}
		public ParensBlockContext[] parensBlock() {
			return GetRuleContexts<ParensBlockContext>();
		}
		public ParensBlockContext parensBlock(int i) {
			return GetRuleContext<ParensBlockContext>(i);
		}
		public ExpressionWithoutAngleBracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithoutAngleBrackets; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.EnterExpressionWithoutAngleBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppListener typedListener = listener as ICppListener;
			if (typedListener != null) typedListener.ExitExpressionWithoutAngleBrackets(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithoutAngleBracketsContext expressionWithoutAngleBrackets() {
		ExpressionWithoutAngleBracketsContext _localctx = new ExpressionWithoutAngleBracketsContext(Context, State);
		EnterRule(_localctx, 50, RULE_expressionWithoutAngleBrackets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 341;
				switch (TokenStream.La(1)) {
				case LeftBrace:
					{
					State = 337; bracesBlock();
					}
					break;
				case LeftBracket:
					{
					State = 338; bracketsBlock();
					}
					break;
				case LeftParen:
					{
					State = 339; parensBlock();
					}
					break;
				case Scope:
				case LessEqual:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Class:
				case Struct:
				case Union:
				case Enum:
				case TypeDef:
				case Template:
				case TypeName:
				case Namespace:
				case Using:
				case IntLiteral:
				case FloatLiteral:
				case CharLiteral:
				case StringLiteral:
				case BoolLiteral:
				case IntType:
				case Modifier:
				case AccessSpecifier:
				case Preproc:
				case LineComment:
				case BlockComment:
				case Whitespace:
				case ObjectiveCDirective:
				case LinkageSpecification:
				case CommonMacro:
				case Id:
					{
					State = 340;
					_la = TokenStream.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Less) | (1L << Greater) | (1L << Semi) | (1L << Comma))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << LessEqual) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockComment - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return declarator_sempred((DeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool declarator_sempred(DeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3J\x15C\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\a\x2\x38\n\x2\f\x2\xE\x2;\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3H\n\x3\f\x3\xE\x3K\v\x3\x3"+
		"\x3\x3\x3\x3\x3\x5\x3P\n\x3\x3\x3\x3\x3\a\x3T\n\x3\f\x3\xE\x3W\v\x3\x3"+
		"\x3\x3\x3\x5\x3[\n\x3\x3\x4\x3\x4\x5\x4_\n\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x5\x4\x66\n\x4\x3\x4\x3\x4\x3\x4\x5\x4k\n\x4\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x5\x5q\n\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\a\x6y\n\x6\f\x6"+
		"\xE\x6|\v\x6\x3\x6\x3\x6\x3\a\x3\a\x5\a\x82\n\a\x3\a\x3\a\x3\a\x3\b\x5"+
		"\b\x88\n\b\x3\b\x3\b\x5\b\x8C\n\b\x3\b\x3\b\x3\b\x5\b\x91\n\b\x5\b\x93"+
		"\n\b\x3\b\x3\b\x5\b\x97\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\a\t\x9F\n\t"+
		"\f\t\xE\t\xA2\v\t\x3\n\x3\n\x5\n\xA6\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"\xAD\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3"+
		"\f\a\f\xBC\n\f\f\f\xE\f\xBF\v\f\x3\r\x3\r\x5\r\xC3\n\r\x3\r\x3\r\x3\r"+
		"\x3\r\a\r\xC9\n\r\f\r\xE\r\xCC\v\r\x5\r\xCE\n\r\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xDA\n\xE\x3\xE\x5\xE\xDD\n"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xE3\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\xE9\n\xE\x3\xE\a\xE\xEC\n\xE\f\xE\xE\xE\xEF\v\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\x10\x5\x10\xF5\n\x10\x3\x10\x3\x10\x5\x10\xF9\n\x10\x3\x10\x5\x10"+
		"\xFC\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x102\n\x11\f\x11\xE\x11\x105"+
		"\v\x11\x5\x11\x107\n\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x5\x12\x10E"+
		"\n\x12\x3\x12\x5\x12\x111\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x116\n\x12"+
		"\x5\x12\x118\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x11E\n\x13\f\x13"+
		"\xE\x13\x121\v\x13\x5\x13\x123\n\x13\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14"+
		"\x129\n\x14\x3\x15\x3\x15\x3\x15\x5\x15\x12E\n\x15\x3\x15\x6\x15\x131"+
		"\n\x15\r\x15\xE\x15\x132\x5\x15\x135\n\x15\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\a\x19\x147\n\x19\f\x19\xE\x19\x14A\v\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x6\x1A\x150\n\x1A\r\x1A\xE\x1A\x151\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x6\x1B\x158\n\x1B\r\x1B\xE\x1B\x159\x3\x1B\x3z\x3\x1A\x1C\x2\x4"+
		"\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x2\x6"+
		"\x3\x2\x32\x35\x3\x2\x4\t\x4\x2\x4\t !\x5\x2\x4\n\f\f !\x187\x2\x39\x3"+
		"\x2\x2\x2\x4Z\x3\x2\x2\x2\x6^\x3\x2\x2\x2\bn\x3\x2\x2\x2\nu\x3\x2\x2\x2"+
		"\f\x81\x3\x2\x2\x2\xE\x87\x3\x2\x2\x2\x10\x9A\x3\x2\x2\x2\x12\xA5\x3\x2"+
		"\x2\x2\x14\xB0\x3\x2\x2\x2\x16\xB7\x3\x2\x2\x2\x18\xC2\x3\x2\x2\x2\x1A"+
		"\xE2\x3\x2\x2\x2\x1C\xF0\x3\x2\x2\x2\x1E\xFB\x3\x2\x2\x2 \xFD\x3\x2\x2"+
		"\x2\"\x10D\x3\x2\x2\x2$\x119\x3\x2\x2\x2&\x128\x3\x2\x2\x2(\x134\x3\x2"+
		"\x2\x2*\x136\x3\x2\x2\x2,\x13A\x3\x2\x2\x2.\x13E\x3\x2\x2\x2\x30\x148"+
		"\x3\x2\x2\x2\x32\x14F\x3\x2\x2\x2\x34\x157\x3\x2\x2\x2\x36\x38\x5\x4\x3"+
		"\x2\x37\x36\x3\x2\x2\x2\x38;\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2"+
		"\x2\x2:<\x3\x2\x2\x2;\x39\x3\x2\x2\x2<=\a\x2\x2\x3=\x3\x3\x2\x2\x2>[\x5"+
		"\x6\x4\x2?[\x5\b\x5\x2@[\x5\n\x6\x2\x41[\x5\f\a\x2\x42[\x5\xE\b\x2\x43"+
		"[\x5\x12\n\x2\x44[\x5\x14\v\x2\x45I\a\b\x2\x2\x46H\x5\x4\x3\x2G\x46\x3"+
		"\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JL\x3\x2\x2\x2KI\x3"+
		"\x2\x2\x2L[\a\t\x2\x2MO\a\x39\x2\x2NP\aJ\x2\x2ON\x3\x2\x2\x2OP\x3\x2\x2"+
		"\x2PQ\x3\x2\x2\x2QU\a\b\x2\x2RT\x5\x4\x3\x2SR\x3\x2\x2\x2TW\x3\x2\x2\x2"+
		"US\x3\x2\x2\x2UV\x3\x2\x2\x2VX\x3\x2\x2\x2WU\x3\x2\x2\x2X[\a\t\x2\x2Y"+
		"[\a \x2\x2Z>\x3\x2\x2\x2Z?\x3\x2\x2\x2Z@\x3\x2\x2\x2Z\x41\x3\x2\x2\x2"+
		"Z\x42\x3\x2\x2\x2Z\x43\x3\x2\x2\x2Z\x44\x3\x2\x2\x2Z\x45\x3\x2\x2\x2Z"+
		"M\x3\x2\x2\x2ZY\x3\x2\x2\x2[\x5\x3\x2\x2\x2\\]\a\x37\x2\x2]_\x5 \x11\x2"+
		"^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\x65\x3\x2\x2\x2`\x66\x5\x1E\x10\x2\x61"+
		"\x66\a\x32\x2\x2\x62\x66\a\x33\x2\x2\x63\x66\a\x34\x2\x2\x64\x66\a\x35"+
		"\x2\x2\x65`\x3\x2\x2\x2\x65\x61\x3\x2\x2\x2\x65\x62\x3\x2\x2\x2\x65\x63"+
		"\x3\x2\x2\x2\x65\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gj\x5\x1A\xE\x2hi\a\""+
		"\x2\x2ik\x5\x32\x1A\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2kl\x3\x2\x2\x2lm\a "+
		"\x2\x2m\a\x3\x2\x2\x2np\a\x36\x2\x2oq\t\x2\x2\x2po\x3\x2\x2\x2pq\x3\x2"+
		"\x2\x2qr\x3\x2\x2\x2rs\x5\x1C\xF\x2st\a \x2\x2t\t\x3\x2\x2\x2uv\a:\x2"+
		"\x2vz\a\x39\x2\x2wy\v\x2\x2\x2xw\x3\x2\x2\x2y|\x3\x2\x2\x2z{\x3\x2\x2"+
		"\x2zx\x3\x2\x2\x2{}\x3\x2\x2\x2|z\x3\x2\x2\x2}~\a \x2\x2~\v\x3\x2\x2\x2"+
		"\x7F\x80\a\x37\x2\x2\x80\x82\x5 \x11\x2\x81\x7F\x3\x2\x2\x2\x81\x82\x3"+
		"\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x5\x1C\xF\x2\x84\x85\x5*\x16\x2"+
		"\x85\r\x3\x2\x2\x2\x86\x88\a\x36\x2\x2\x87\x86\x3\x2\x2\x2\x87\x88\x3"+
		"\x2\x2\x2\x88\x8B\x3\x2\x2\x2\x89\x8A\a\x37\x2\x2\x8A\x8C\x5 \x11\x2\x8B"+
		"\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x92\t\x2"+
		"\x2\x2\x8E\x90\x5\x1E\x10\x2\x8F\x91\x5\x10\t\x2\x90\x8F\x3\x2\x2\x2\x90"+
		"\x91\x3\x2\x2\x2\x91\x93\x3\x2\x2\x2\x92\x8E\x3\x2\x2\x2\x92\x93\x3\x2"+
		"\x2\x2\x93\x94\x3\x2\x2\x2\x94\x96\x5*\x16\x2\x95\x97\aJ\x2\x2\x96\x95"+
		"\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x99\a \x2\x2"+
		"\x99\xF\x3\x2\x2\x2\x9A\x9B\a\x1F\x2\x2\x9B\xA0\x5\x1E\x10\x2\x9C\x9D"+
		"\a!\x2\x2\x9D\x9F\x5\x1E\x10\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA2\x3\x2\x2\x2"+
		"\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\x11\x3\x2\x2\x2\xA2\xA0\x3"+
		"\x2\x2\x2\xA3\xA4\a\x37\x2\x2\xA4\xA6\x5 \x11\x2\xA5\xA3\x3\x2\x2\x2\xA5"+
		"\xA6\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\x5\x1E\x10\x2\xA8\xA9\a\x3"+
		"\x2\x2\xA9\xAA\aJ\x2\x2\xAA\xAC\x5.\x18\x2\xAB\xAD\x5\x16\f\x2\xAC\xAB"+
		"\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF\x5*\x16\x2"+
		"\xAF\x13\x3\x2\x2\x2\xB0\xB1\x5\x1E\x10\x2\xB1\xB2\a\x3\x2\x2\xB2\xB3"+
		"\a\x1D\x2\x2\xB3\xB4\aJ\x2\x2\xB4\xB5\x5.\x18\x2\xB5\xB6\x5*\x16\x2\xB6"+
		"\x15\x3\x2\x2\x2\xB7\xB8\a\x1F\x2\x2\xB8\xBD\x5\x18\r\x2\xB9\xBA\a!\x2"+
		"\x2\xBA\xBC\x5\x18\r\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBF\x3\x2\x2\x2\xBD\xBB"+
		"\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\x17\x3\x2\x2\x2\xBF\xBD\x3\x2\x2"+
		"\x2\xC0\xC3\aJ\x2\x2\xC1\xC3\x5\x1E\x10\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC1"+
		"\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xCD\a\x4\x2\x2\xC5\xCA\x5\x32\x1A"+
		"\x2\xC6\xC7\a!\x2\x2\xC7\xC9\x5\x32\x1A\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCC"+
		"\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCE\x3\x2\x2"+
		"\x2\xCC\xCA\x3\x2\x2\x2\xCD\xC5\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF"+
		"\x3\x2\x2\x2\xCF\xD0\a\x5\x2\x2\xD0\x19\x3\x2\x2\x2\xD1\xD2\b\xE\x1\x2"+
		"\xD2\xD3\a\x14\x2\x2\xD3\xE3\x5\x1A\xE\x5\xD4\xD5\a\x17\x2\x2\xD5\xE3"+
		"\x5\x1A\xE\x4\xD6\xD7\x5\x1E\x10\x2\xD7\xD8\a\x3\x2\x2\xD8\xDA\x3\x2\x2"+
		"\x2\xD9\xD6\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDC\x3\x2\x2\x2\xDB\xDD"+
		"\aJ\x2\x2\xDC\xDB\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xE3\x3\x2\x2\x2"+
		"\xDE\xDF\a\x4\x2\x2\xDF\xE0\x5\x1A\xE\x2\xE0\xE1\a\x5\x2\x2\xE1\xE3\x3"+
		"\x2\x2\x2\xE2\xD1\x3\x2\x2\x2\xE2\xD4\x3\x2\x2\x2\xE2\xD9\x3\x2\x2\x2"+
		"\xE2\xDE\x3\x2\x2\x2\xE3\xED\x3\x2\x2\x2\xE4\xE5\f\a\x2\x2\xE5\xEC\x5"+
		",\x17\x2\xE6\xE8\f\x6\x2\x2\xE7\xE9\x5$\x13\x2\xE8\xE7\x3\x2\x2\x2\xE8"+
		"\xE9\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEC\x5.\x18\x2\xEB\xE4\x3\x2"+
		"\x2\x2\xEB\xE6\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED"+
		"\xEE\x3\x2\x2\x2\xEE\x1B\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xF0\xF1\x5\x1E"+
		"\x10\x2\xF1\xF2\x5\x1A\xE\x2\xF2\x1D\x3\x2\x2\x2\xF3\xF5\x5(\x15\x2\xF4"+
		"\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF8\aJ\x2"+
		"\x2\xF7\xF9\x5$\x13\x2\xF8\xF7\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFC"+
		"\x3\x2\x2\x2\xFA\xFC\a@\x2\x2\xFB\xF4\x3\x2\x2\x2\xFB\xFA\x3\x2\x2\x2"+
		"\xFC\x1F\x3\x2\x2\x2\xFD\x106\a\n\x2\x2\xFE\x103\x5\"\x12\x2\xFF\x100"+
		"\a!\x2\x2\x100\x102\x5\"\x12\x2\x101\xFF\x3\x2\x2\x2\x102\x105\x3\x2\x2"+
		"\x2\x103\x101\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x107\x3\x2\x2\x2"+
		"\x105\x103\x3\x2\x2\x2\x106\xFE\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107"+
		"\x108\x3\x2\x2\x2\x108\x109\a\f\x2\x2\x109!\x3\x2\x2\x2\x10A\x10E\x5\x1C"+
		"\xF\x2\x10B\x10E\a\x38\x2\x2\x10C\x10E\a\x32\x2\x2\x10D\x10A\x3\x2\x2"+
		"\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10C\x3\x2\x2\x2\x10E\x110\x3\x2\x2\x2"+
		"\x10F\x111\aJ\x2\x2\x110\x10F\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111\x117"+
		"\x3\x2\x2\x2\x112\x115\a\"\x2\x2\x113\x116\x5\x1C\xF\x2\x114\x116\x5\x34"+
		"\x1B\x2\x115\x113\x3\x2\x2\x2\x115\x114\x3\x2\x2\x2\x116\x118\x3\x2\x2"+
		"\x2\x117\x112\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118#\x3\x2\x2\x2\x119"+
		"\x122\a\n\x2\x2\x11A\x11F\x5&\x14\x2\x11B\x11C\a!\x2\x2\x11C\x11E\x5&"+
		"\x14\x2\x11D\x11B\x3\x2\x2\x2\x11E\x121\x3\x2\x2\x2\x11F\x11D\x3\x2\x2"+
		"\x2\x11F\x120\x3\x2\x2\x2\x120\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2"+
		"\x122\x11A\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124"+
		"\x125\a\f\x2\x2\x125%\x3\x2\x2\x2\x126\x129\x5\x1C\xF\x2\x127\x129\x5"+
		"\x34\x1B\x2\x128\x126\x3\x2\x2\x2\x128\x127\x3\x2\x2\x2\x129\'\x3\x2\x2"+
		"\x2\x12A\x135\a\x3\x2\x2\x12B\x12D\aJ\x2\x2\x12C\x12E\x5$\x13\x2\x12D"+
		"\x12C\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x131"+
		"\a\x3\x2\x2\x130\x12B\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x130\x3\x2"+
		"\x2\x2\x132\x133\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2\x134\x12A\x3\x2\x2"+
		"\x2\x134\x130\x3\x2\x2\x2\x135)\x3\x2\x2\x2\x136\x137\a\b\x2\x2\x137\x138"+
		"\x5\x30\x19\x2\x138\x139\a\t\x2\x2\x139+\x3\x2\x2\x2\x13A\x13B\a\x6\x2"+
		"\x2\x13B\x13C\x5\x30\x19\x2\x13C\x13D\a\a\x2\x2\x13D-\x3\x2\x2\x2\x13E"+
		"\x13F\a\x4\x2\x2\x13F\x140\x5\x30\x19\x2\x140\x141\a\x5\x2\x2\x141/\x3"+
		"\x2\x2\x2\x142\x147\n\x3\x2\x2\x143\x147\x5*\x16\x2\x144\x147\x5,\x17"+
		"\x2\x145\x147\x5.\x18\x2\x146\x142\x3\x2\x2\x2\x146\x143\x3\x2\x2\x2\x146"+
		"\x144\x3\x2\x2\x2\x146\x145\x3\x2\x2\x2\x147\x14A\x3\x2\x2\x2\x148\x146"+
		"\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x31\x3\x2\x2\x2\x14A\x148\x3\x2"+
		"\x2\x2\x14B\x150\x5*\x16\x2\x14C\x150\x5,\x17\x2\x14D\x150\x5.\x18\x2"+
		"\x14E\x150\n\x4\x2\x2\x14F\x14B\x3\x2\x2\x2\x14F\x14C\x3\x2\x2\x2\x14F"+
		"\x14D\x3\x2\x2\x2\x14F\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x14F"+
		"\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x33\x3\x2\x2\x2\x153\x158\x5*"+
		"\x16\x2\x154\x158\x5,\x17\x2\x155\x158\x5.\x18\x2\x156\x158\n\x5\x2\x2"+
		"\x157\x153\x3\x2\x2\x2\x157\x154\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157"+
		"\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159\x15A"+
		"\x3\x2\x2\x2\x15A\x35\x3\x2\x2\x2\x34\x39IOUZ^\x65jpz\x81\x87\x8B\x90"+
		"\x92\x96\xA0\xA5\xAC\xBD\xC2\xCA\xCD\xD9\xDC\xE2\xE8\xEB\xED\xF4\xF8\xFB"+
		"\x103\x106\x10D\x110\x115\x117\x11F\x122\x128\x12D\x132\x134\x146\x148"+
		"\x14F\x151\x157\x159";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CppParser
