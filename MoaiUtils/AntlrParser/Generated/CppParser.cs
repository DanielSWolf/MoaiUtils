//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CppParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace CppParser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CppParser : Parser {
	public const int
		Scope=1, LeftParen=2, RightParen=3, LeftBracket=4, RightBracket=5, LeftBrace=6, 
		RightBrace=7, Less=8, LessEqual=9, Greater=10, GreaterEqual=11, LeftShift=12, 
		RightShift=13, Plus=14, PlusPlus=15, Minus=16, MinusMinus=17, Star=18, 
		Div=19, Mod=20, And=21, Or=22, AndAnd=23, OrOr=24, Caret=25, Not=26, Tilde=27, 
		Question=28, Colon=29, Semi=30, Comma=31, Assign=32, StarAssign=33, DivAssign=34, 
		ModAssign=35, PlusAssign=36, MinusAssign=37, LeftShiftAssign=38, RightShiftAssign=39, 
		AndAssign=40, XorAssign=41, OrAssign=42, Equal=43, NotEqual=44, Arrow=45, 
		Dot=46, Ellipsis=47, Class=48, Struct=49, Union=50, Enum=51, TypeDef=52, 
		Template=53, TypeName=54, Namespace=55, Using=56, IntLiteral=57, FloatLiteral=58, 
		CharLiteral=59, StringLiteral=60, BoolLiteral=61, IntType=62, Modifier=63, 
		AccessSpecifier=64, Preproc=65, LineComment=66, BlockCommentStart=67, 
		DocBlockStart=68, Whitespace=69, ObjectiveCDirective=70, LinkageSpecification=71, 
		CommonMacro=72, Id=73, DocBlockEnd=74, LuaNameTag=75, TextTag=76, ConstTag=77, 
		FlagTag=78, AttributeTag=79, InParamTag=80, OptionalInParamTag=81, OutParamTag=82, 
		OverloadTag=83, UnknownTag=84, DocWord=85, DocWhitespace=86, BlockCommentEnd=87;
	public const int
		RULE_file = 0, RULE_topLevelStatement = 1, RULE_declaration = 2, RULE_typeDef = 3, 
		RULE_usingDirective = 4, RULE_functionDefinition = 5, RULE_classDefinition = 6, 
		RULE_baseClause = 7, RULE_constructorDefinition = 8, RULE_destructorDefinition = 9, 
		RULE_memberInitializerList = 10, RULE_memberInitializer = 11, RULE_declarator = 12, 
		RULE_type = 13, RULE_typeSpecifier = 14, RULE_templateParamsBlock = 15, 
		RULE_templateParam = 16, RULE_templateArgsBlock = 17, RULE_templateArg = 18, 
		RULE_nestedNameSpecifier = 19, RULE_bracesBlock = 20, RULE_bracketsBlock = 21, 
		RULE_parensBlock = 22, RULE_blockContent = 23, RULE_expression = 24, RULE_expressionWithoutAngleBrackets = 25, 
		RULE_classDocBlock = 26, RULE_functionDocBlock = 27, RULE_luaNameTagLine = 28, 
		RULE_textTagLine = 29, RULE_constTagLine = 30, RULE_flagTagLine = 31, 
		RULE_attributeTagLine = 32, RULE_overloadList = 33, RULE_overloadTagLine = 34, 
		RULE_overloadBlock = 35, RULE_inParamTagLine = 36, RULE_optionalInParamTagLine = 37, 
		RULE_outParamTagLine = 38;
	public static readonly string[] ruleNames = {
		"file", "topLevelStatement", "declaration", "typeDef", "usingDirective", 
		"functionDefinition", "classDefinition", "baseClause", "constructorDefinition", 
		"destructorDefinition", "memberInitializerList", "memberInitializer", 
		"declarator", "type", "typeSpecifier", "templateParamsBlock", "templateParam", 
		"templateArgsBlock", "templateArg", "nestedNameSpecifier", "bracesBlock", 
		"bracketsBlock", "parensBlock", "blockContent", "expression", "expressionWithoutAngleBrackets", 
		"classDocBlock", "functionDocBlock", "luaNameTagLine", "textTagLine", 
		"constTagLine", "flagTagLine", "attributeTagLine", "overloadList", "overloadTagLine", 
		"overloadBlock", "inParamTagLine", "optionalInParamTagLine", "outParamTagLine"
	};

	private static readonly string[] _LiteralNames = {
		null, "'::'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
		"'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
		"';'", "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'", 
		"'class'", "'struct'", "'union'", "'enum'", "'typedef'", "'template'", 
		"'typename'", "'namespace'", "'using'", null, null, null, null, null, 
		null, null, null, null, null, "'/*'", "'/**'", null, null, null, null, 
		null, null, null, "'@text'", "'@const'", "'@flag'", "'@attr'", "'@in'", 
		"'@opt'", "'@out'", "'@overload'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Scope", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
		"LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", 
		"LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
		"Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", "Tilde", 
		"Question", "Colon", "Semi", "Comma", "Assign", "StarAssign", "DivAssign", 
		"ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
		"AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", "Arrow", "Dot", 
		"Ellipsis", "Class", "Struct", "Union", "Enum", "TypeDef", "Template", 
		"TypeName", "Namespace", "Using", "IntLiteral", "FloatLiteral", "CharLiteral", 
		"StringLiteral", "BoolLiteral", "IntType", "Modifier", "AccessSpecifier", 
		"Preproc", "LineComment", "BlockCommentStart", "DocBlockStart", "Whitespace", 
		"ObjectiveCDirective", "LinkageSpecification", "CommonMacro", "Id", "DocBlockEnd", 
		"LuaNameTag", "TextTag", "ConstTag", "FlagTag", "AttributeTag", "InParamTag", 
		"OptionalInParamTag", "OutParamTag", "OverloadTag", "UnknownTag", "DocWord", 
		"DocWhitespace", "BlockCommentEnd"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CppParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CppParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CppParser.Eof, 0); }
		public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftBrace) | (1L << Semi) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << Namespace) | (1L << Using) | (1L << IntType))) != 0) || _la==DocBlockStart || _la==Id) {
				{
				{
				State = 78; topLevelStatement();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 84; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public TypeDefContext typeDef() {
			return GetRuleContext<TypeDefContext>(0);
		}
		public UsingDirectiveContext usingDirective() {
			return GetRuleContext<UsingDirectiveContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public ConstructorDefinitionContext constructorDefinition() {
			return GetRuleContext<ConstructorDefinitionContext>(0);
		}
		public DestructorDefinitionContext destructorDefinition() {
			return GetRuleContext<DestructorDefinitionContext>(0);
		}
		public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public ITerminalNode Namespace() { return GetToken(CppParser.Namespace, 0); }
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTopLevelStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTopLevelStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStatementContext topLevelStatement() {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelStatement);
		int _la;
		try {
			State = 114;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; typeDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; usingDirective();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; functionDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 90; classDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; constructorDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 92; destructorDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 93; Match(LeftBrace);
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftBrace) | (1L << Semi) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << Namespace) | (1L << Using) | (1L << IntType))) != 0) || _la==DocBlockStart || _la==Id) {
					{
					{
					State = 94; topLevelStatement();
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 100; Match(RightBrace);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 101; Match(Namespace);
				State = 103;
				_la = TokenStream.La(1);
				if (_la==Id) {
					{
					State = 102; Match(Id);
					}
				}

				State = 105; Match(LeftBrace);
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftBrace) | (1L << Semi) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << Namespace) | (1L << Using) | (1L << IntType))) != 0) || _la==DocBlockStart || _la==Id) {
					{
					{
					State = 106; topLevelStatement();
					}
					}
					State = 111;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 112; Match(RightBrace);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 113; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 116; Match(Template);
				State = 117; templateParamsBlock();
				}
			}

			State = 125;
			switch (TokenStream.La(1)) {
			case Scope:
			case IntType:
			case Id:
				{
				State = 120; typeSpecifier();
				}
				break;
			case Class:
				{
				State = 121; Match(Class);
				}
				break;
			case Struct:
				{
				State = 122; Match(Struct);
				}
				break;
			case Union:
				{
				State = 123; Match(Union);
				}
				break;
			case Enum:
				{
				State = 124; Match(Enum);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 127; declarator(0);
			State = 130;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 128; Match(Assign);
				State = 129; expression();
				}
			}

			State = 132; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(TypeDef);
			State = 136;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum))) != 0)) {
				{
				State = 135;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 138; type();
			State = 139; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_usingDirective);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(Using);
			State = 142; Match(Namespace);
			State = 146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 143;
					MatchWildcard();
					}
					} 
				}
				State = 148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 149; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public FunctionDocBlockContext functionDocBlock() {
			return GetRuleContext<FunctionDocBlockContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = TokenStream.La(1);
			if (_la==DocBlockStart) {
				{
				State = 151; functionDocBlock();
				}
			}

			State = 156;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 154; Match(Template);
				State = 155; templateParamsBlock();
				}
			}

			State = 158; type();
			State = 159; bracesBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public ClassDocBlockContext classDocBlock() {
			return GetRuleContext<ClassDocBlockContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public BaseClauseContext baseClause() {
			return GetRuleContext<BaseClauseContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_la = TokenStream.La(1);
			if (_la==DocBlockStart) {
				{
				State = 161; classDocBlock();
				}
			}

			State = 165;
			_la = TokenStream.La(1);
			if (_la==TypeDef) {
				{
				State = 164; Match(TypeDef);
				}
			}

			State = 169;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 167; Match(Template);
				State = 168; templateParamsBlock();
				}
			}

			State = 171;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 176;
			_la = TokenStream.La(1);
			if (_la==Scope || _la==IntType || _la==Id) {
				{
				State = 172; typeSpecifier();
				State = 174;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 173; baseClause();
					}
				}

				}
			}

			State = 178; bracesBlock();
			State = 180;
			_la = TokenStream.La(1);
			if (_la==Id) {
				{
				State = 179; Match(Id);
				}
			}

			State = 182; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseClauseContext : ParserRuleContext {
		public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		public BaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterBaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitBaseClause(this);
		}
	}

	[RuleVersion(0)]
	public BaseClauseContext baseClause() {
		BaseClauseContext _localctx = new BaseClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(Colon);
			State = 185; typeSpecifier();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 186; Match(Comma);
				State = 187; typeSpecifier();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDefinitionContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public ParensBlockContext parensBlock() {
			return GetRuleContext<ParensBlockContext>(0);
		}
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public MemberInitializerListContext memberInitializerList() {
			return GetRuleContext<MemberInitializerListContext>(0);
		}
		public ConstructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterConstructorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitConstructorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDefinitionContext constructorDefinition() {
		ConstructorDefinitionContext _localctx = new ConstructorDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_constructorDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 193; Match(Template);
				State = 194; templateParamsBlock();
				}
			}

			State = 197; typeSpecifier();
			State = 198; Match(Scope);
			State = 199; Match(Id);
			State = 200; parensBlock();
			State = 202;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 201; memberInitializerList();
				}
			}

			State = 204; bracesBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorDefinitionContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public ParensBlockContext parensBlock() {
			return GetRuleContext<ParensBlockContext>(0);
		}
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public DestructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterDestructorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitDestructorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DestructorDefinitionContext destructorDefinition() {
		DestructorDefinitionContext _localctx = new DestructorDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_destructorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; typeSpecifier();
			State = 207; Match(Scope);
			State = 208; Match(Tilde);
			State = 209; Match(Id);
			State = 210; parensBlock();
			State = 211; bracesBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberInitializerListContext : ParserRuleContext {
		public MemberInitializerContext[] memberInitializer() {
			return GetRuleContexts<MemberInitializerContext>();
		}
		public MemberInitializerContext memberInitializer(int i) {
			return GetRuleContext<MemberInitializerContext>(i);
		}
		public MemberInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberInitializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterMemberInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitMemberInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public MemberInitializerListContext memberInitializerList() {
		MemberInitializerListContext _localctx = new MemberInitializerListContext(Context, State);
		EnterRule(_localctx, 20, RULE_memberInitializerList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(Colon);
			State = 214; memberInitializer();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 215; Match(Comma);
				State = 216; memberInitializer();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberInitializerContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MemberInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterMemberInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitMemberInitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberInitializerContext memberInitializer() {
		MemberInitializerContext _localctx = new MemberInitializerContext(Context, State);
		EnterRule(_localctx, 22, RULE_memberInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 222; Match(Id);
				}
				break;
			case 2:
				{
				State = 223; typeSpecifier();
				}
				break;
			}
			State = 226; Match(LeftParen);
			State = 235;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0)) {
				{
				State = 227; expression();
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 228; Match(Comma);
					State = 229; expression();
					}
					}
					State = 234;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 237; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
	 
		public DeclaratorContext() { }
		public virtual void CopyFrom(DeclaratorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public BracketsBlockContext bracketsBlock() {
			return GetRuleContext<BracketsBlockContext>(0);
		}
		public ArrayContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}
	public partial class GroupContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public GroupContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
	}
	public partial class FunctionContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ParensBlockContext parensBlock() {
			return GetRuleContext<ParensBlockContext>(0);
		}
		public TemplateArgsBlockContext templateArgsBlock() {
			return GetRuleContext<TemplateArgsBlockContext>(0);
		}
		public FunctionContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}
	public partial class ReferenceContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ReferenceContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}
	public partial class PointerContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public PointerContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterPointer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitPointer(this);
		}
	}
	public partial class NameContext : DeclaratorContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public NameContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		return declarator(0);
	}

	private DeclaratorContext declarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclaratorContext _localctx = new DeclaratorContext(Context, _parentState);
		DeclaratorContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_declarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				_localctx = new PointerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 240; Match(Star);
				State = 241; declarator(3);
				}
				break;
			case 2:
				{
				_localctx = new ReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 242; Match(And);
				State = 243; declarator(2);
				}
				break;
			case 3:
				{
				_localctx = new NameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 244; typeSpecifier();
					State = 245; Match(Scope);
					}
					break;
				}
				State = 250;
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 249; Match(Id);
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new GroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 252; Match(LeftParen);
				State = 253; declarator(0);
				State = 254; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 265;
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						_localctx = new ArrayContext(new DeclaratorContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_declarator);
						State = 258;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 259; bracketsBlock();
						}
						break;
					case 2:
						{
						_localctx = new FunctionContext(new DeclaratorContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_declarator);
						State = 260;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 262;
						_la = TokenStream.La(1);
						if (_la==Less) {
							{
							State = 261; templateArgsBlock();
							}
						}

						State = 264; parensBlock();
						}
						break;
					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; typeSpecifier();
			State = 271; declarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public TemplateArgsBlockContext templateArgsBlock() {
			return GetRuleContext<TemplateArgsBlockContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(CppParser.IntType, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeSpecifier);
		try {
			State = 281;
			switch (TokenStream.La(1)) {
			case Scope:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 274;
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 273; nestedNameSpecifier();
					}
					break;
				}
				State = 276; Match(Id);
				State = 278;
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 277; templateArgsBlock();
					}
					break;
				}
				}
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280; Match(IntType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamsBlockContext : ParserRuleContext {
		public TemplateParamContext[] templateParam() {
			return GetRuleContexts<TemplateParamContext>();
		}
		public TemplateParamContext templateParam(int i) {
			return GetRuleContext<TemplateParamContext>(i);
		}
		public TemplateParamsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTemplateParamsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTemplateParamsBlock(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamsBlockContext templateParamsBlock() {
		TemplateParamsBlockContext _localctx = new TemplateParamsBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_templateParamsBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(Less);
			State = 292;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << Class) | (1L << TypeName) | (1L << IntType))) != 0) || _la==Id) {
				{
				State = 284; templateParam();
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 285; Match(Comma);
					State = 286; templateParam();
					}
					}
					State = 291;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 294; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public ExpressionWithoutAngleBracketsContext expressionWithoutAngleBrackets() {
			return GetRuleContext<ExpressionWithoutAngleBracketsContext>(0);
		}
		public TemplateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTemplateParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTemplateParam(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamContext templateParam() {
		TemplateParamContext _localctx = new TemplateParamContext(Context, State);
		EnterRule(_localctx, 32, RULE_templateParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			switch (TokenStream.La(1)) {
			case Scope:
			case IntType:
			case Id:
				{
				State = 296; type();
				}
				break;
			case TypeName:
				{
				State = 297; Match(TypeName);
				}
				break;
			case Class:
				{
				State = 298; Match(Class);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 302;
			_la = TokenStream.La(1);
			if (_la==Id) {
				{
				State = 301; Match(Id);
				}
			}

			State = 309;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 304; Match(Assign);
				State = 307;
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 305; type();
					}
					break;
				case 2:
					{
					State = 306; expressionWithoutAngleBrackets();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgsBlockContext : ParserRuleContext {
		public TemplateArgContext[] templateArg() {
			return GetRuleContexts<TemplateArgContext>();
		}
		public TemplateArgContext templateArg(int i) {
			return GetRuleContext<TemplateArgContext>(i);
		}
		public TemplateArgsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTemplateArgsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTemplateArgsBlock(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgsBlockContext templateArgsBlock() {
		TemplateArgsBlockContext _localctx = new TemplateArgsBlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_templateArgsBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(Less);
			State = 320;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << LessEqual) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0)) {
				{
				State = 312; templateArg();
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 313; Match(Comma);
					State = 314; templateArg();
					}
					}
					State = 319;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 322; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionWithoutAngleBracketsContext expressionWithoutAngleBrackets() {
			return GetRuleContext<ExpressionWithoutAngleBracketsContext>(0);
		}
		public TemplateArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTemplateArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTemplateArg(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgContext templateArg() {
		TemplateArgContext _localctx = new TemplateArgContext(Context, State);
		EnterRule(_localctx, 36, RULE_templateArg);
		try {
			State = 326;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325; expressionWithoutAngleBrackets();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedNameSpecifierContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(CppParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(CppParser.Id, i);
		}
		public TemplateArgsBlockContext[] templateArgsBlock() {
			return GetRuleContexts<TemplateArgsBlockContext>();
		}
		public TemplateArgsBlockContext templateArgsBlock(int i) {
			return GetRuleContext<TemplateArgsBlockContext>(i);
		}
		public NestedNameSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedNameSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterNestedNameSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitNestedNameSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public NestedNameSpecifierContext nestedNameSpecifier() {
		NestedNameSpecifierContext _localctx = new NestedNameSpecifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_nestedNameSpecifier);
		int _la;
		try {
			int _alt;
			State = 338;
			switch (TokenStream.La(1)) {
			case Scope:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; Match(Scope);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 329; Match(Id);
						State = 331;
						_la = TokenStream.La(1);
						if (_la==Less) {
							{
							State = 330; templateArgsBlock();
							}
						}

						State = 333; Match(Scope);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 336;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracesBlockContext : ParserRuleContext {
		public BlockContentContext blockContent() {
			return GetRuleContext<BlockContentContext>(0);
		}
		public BracesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterBracesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitBracesBlock(this);
		}
	}

	[RuleVersion(0)]
	public BracesBlockContext bracesBlock() {
		BracesBlockContext _localctx = new BracesBlockContext(Context, State);
		EnterRule(_localctx, 40, RULE_bracesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(LeftBrace);
			State = 341; blockContent();
			State = 342; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketsBlockContext : ParserRuleContext {
		public BlockContentContext blockContent() {
			return GetRuleContext<BlockContentContext>(0);
		}
		public BracketsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterBracketsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitBracketsBlock(this);
		}
	}

	[RuleVersion(0)]
	public BracketsBlockContext bracketsBlock() {
		BracketsBlockContext _localctx = new BracketsBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_bracketsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(LeftBracket);
			State = 345; blockContent();
			State = 346; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParensBlockContext : ParserRuleContext {
		public BlockContentContext blockContent() {
			return GetRuleContext<BlockContentContext>(0);
		}
		public ParensBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parensBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterParensBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitParensBlock(this);
		}
	}

	[RuleVersion(0)]
	public ParensBlockContext parensBlock() {
		ParensBlockContext _localctx = new ParensBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_parensBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(LeftParen);
			State = 349; blockContent();
			State = 350; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContentContext : ParserRuleContext {
		public BracesBlockContext[] bracesBlock() {
			return GetRuleContexts<BracesBlockContext>();
		}
		public BracesBlockContext bracesBlock(int i) {
			return GetRuleContext<BracesBlockContext>(i);
		}
		public BracketsBlockContext[] bracketsBlock() {
			return GetRuleContexts<BracketsBlockContext>();
		}
		public BracketsBlockContext bracketsBlock(int i) {
			return GetRuleContext<BracketsBlockContext>(i);
		}
		public ParensBlockContext[] parensBlock() {
			return GetRuleContexts<ParensBlockContext>();
		}
		public ParensBlockContext parensBlock(int i) {
			return GetRuleContext<ParensBlockContext>(i);
		}
		public BlockContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterBlockContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitBlockContent(this);
		}
	}

	[RuleVersion(0)]
	public BlockContentContext blockContent() {
		BlockContentContext _localctx = new BlockContentContext(Context, State);
		EnterRule(_localctx, 46, RULE_blockContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Semi) | (1L << Comma) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0)) {
				{
				State = 356;
				switch (TokenStream.La(1)) {
				case Scope:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Semi:
				case Comma:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Class:
				case Struct:
				case Union:
				case Enum:
				case TypeDef:
				case Template:
				case TypeName:
				case Namespace:
				case Using:
				case IntLiteral:
				case FloatLiteral:
				case CharLiteral:
				case StringLiteral:
				case BoolLiteral:
				case IntType:
				case Modifier:
				case AccessSpecifier:
				case Preproc:
				case LineComment:
				case BlockCommentStart:
				case DocBlockStart:
				case Whitespace:
				case ObjectiveCDirective:
				case LinkageSpecification:
				case CommonMacro:
				case Id:
				case DocBlockEnd:
				case LuaNameTag:
				case TextTag:
				case ConstTag:
				case FlagTag:
				case AttributeTag:
				case InParamTag:
				case OptionalInParamTag:
				case OutParamTag:
				case OverloadTag:
				case UnknownTag:
				case DocWord:
				case DocWhitespace:
				case BlockCommentEnd:
					{
					State = 352;
					_la = TokenStream.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				case LeftBrace:
					{
					State = 353; bracesBlock();
					}
					break;
				case LeftBracket:
					{
					State = 354; bracketsBlock();
					}
					break;
				case LeftParen:
					{
					State = 355; parensBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public BracesBlockContext[] bracesBlock() {
			return GetRuleContexts<BracesBlockContext>();
		}
		public BracesBlockContext bracesBlock(int i) {
			return GetRuleContext<BracesBlockContext>(i);
		}
		public BracketsBlockContext[] bracketsBlock() {
			return GetRuleContexts<BracketsBlockContext>();
		}
		public BracketsBlockContext bracketsBlock(int i) {
			return GetRuleContext<BracketsBlockContext>(i);
		}
		public ParensBlockContext[] parensBlock() {
			return GetRuleContexts<ParensBlockContext>();
		}
		public ParensBlockContext parensBlock(int i) {
			return GetRuleContext<ParensBlockContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 365;
				switch (TokenStream.La(1)) {
				case LeftBrace:
					{
					State = 361; bracesBlock();
					}
					break;
				case LeftBracket:
					{
					State = 362; bracketsBlock();
					}
					break;
				case LeftParen:
					{
					State = 363; parensBlock();
					}
					break;
				case Scope:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Class:
				case Struct:
				case Union:
				case Enum:
				case TypeDef:
				case Template:
				case TypeName:
				case Namespace:
				case Using:
				case IntLiteral:
				case FloatLiteral:
				case CharLiteral:
				case StringLiteral:
				case BoolLiteral:
				case IntType:
				case Modifier:
				case AccessSpecifier:
				case Preproc:
				case LineComment:
				case BlockCommentStart:
				case DocBlockStart:
				case Whitespace:
				case ObjectiveCDirective:
				case LinkageSpecification:
				case CommonMacro:
				case Id:
				case DocBlockEnd:
				case LuaNameTag:
				case TextTag:
				case ConstTag:
				case FlagTag:
				case AttributeTag:
				case InParamTag:
				case OptionalInParamTag:
				case OutParamTag:
				case OverloadTag:
				case UnknownTag:
				case DocWord:
				case DocWhitespace:
				case BlockCommentEnd:
					{
					State = 364;
					_la = TokenStream.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Semi) | (1L << Comma))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithoutAngleBracketsContext : ParserRuleContext {
		public BracesBlockContext[] bracesBlock() {
			return GetRuleContexts<BracesBlockContext>();
		}
		public BracesBlockContext bracesBlock(int i) {
			return GetRuleContext<BracesBlockContext>(i);
		}
		public BracketsBlockContext[] bracketsBlock() {
			return GetRuleContexts<BracketsBlockContext>();
		}
		public BracketsBlockContext bracketsBlock(int i) {
			return GetRuleContext<BracketsBlockContext>(i);
		}
		public ParensBlockContext[] parensBlock() {
			return GetRuleContexts<ParensBlockContext>();
		}
		public ParensBlockContext parensBlock(int i) {
			return GetRuleContext<ParensBlockContext>(i);
		}
		public ExpressionWithoutAngleBracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithoutAngleBrackets; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterExpressionWithoutAngleBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitExpressionWithoutAngleBrackets(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithoutAngleBracketsContext expressionWithoutAngleBrackets() {
		ExpressionWithoutAngleBracketsContext _localctx = new ExpressionWithoutAngleBracketsContext(Context, State);
		EnterRule(_localctx, 50, RULE_expressionWithoutAngleBrackets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 373;
				switch (TokenStream.La(1)) {
				case LeftBrace:
					{
					State = 369; bracesBlock();
					}
					break;
				case LeftBracket:
					{
					State = 370; bracketsBlock();
					}
					break;
				case LeftParen:
					{
					State = 371; parensBlock();
					}
					break;
				case Scope:
				case LessEqual:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Class:
				case Struct:
				case Union:
				case Enum:
				case TypeDef:
				case Template:
				case TypeName:
				case Namespace:
				case Using:
				case IntLiteral:
				case FloatLiteral:
				case CharLiteral:
				case StringLiteral:
				case BoolLiteral:
				case IntType:
				case Modifier:
				case AccessSpecifier:
				case Preproc:
				case LineComment:
				case BlockCommentStart:
				case DocBlockStart:
				case Whitespace:
				case ObjectiveCDirective:
				case LinkageSpecification:
				case CommonMacro:
				case Id:
				case DocBlockEnd:
				case LuaNameTag:
				case TextTag:
				case ConstTag:
				case FlagTag:
				case AttributeTag:
				case InParamTag:
				case OptionalInParamTag:
				case OutParamTag:
				case OverloadTag:
				case UnknownTag:
				case DocWord:
				case DocWhitespace:
				case BlockCommentEnd:
					{
					State = 372;
					_la = TokenStream.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Less) | (1L << Greater) | (1L << Semi) | (1L << Comma))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << LessEqual) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDocBlockContext : ParserRuleContext {
		public ITerminalNode DocBlockStart() { return GetToken(CppParser.DocBlockStart, 0); }
		public LuaNameTagLineContext luaNameTagLine() {
			return GetRuleContext<LuaNameTagLineContext>(0);
		}
		public ITerminalNode DocBlockEnd() { return GetToken(CppParser.DocBlockEnd, 0); }
		public TextTagLineContext textTagLine() {
			return GetRuleContext<TextTagLineContext>(0);
		}
		public ConstTagLineContext[] constTagLine() {
			return GetRuleContexts<ConstTagLineContext>();
		}
		public ConstTagLineContext constTagLine(int i) {
			return GetRuleContext<ConstTagLineContext>(i);
		}
		public FlagTagLineContext[] flagTagLine() {
			return GetRuleContexts<FlagTagLineContext>();
		}
		public FlagTagLineContext flagTagLine(int i) {
			return GetRuleContext<FlagTagLineContext>(i);
		}
		public AttributeTagLineContext[] attributeTagLine() {
			return GetRuleContexts<AttributeTagLineContext>();
		}
		public AttributeTagLineContext attributeTagLine(int i) {
			return GetRuleContext<AttributeTagLineContext>(i);
		}
		public ClassDocBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDocBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterClassDocBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitClassDocBlock(this);
		}
	}

	[RuleVersion(0)]
	public ClassDocBlockContext classDocBlock() {
		ClassDocBlockContext _localctx = new ClassDocBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_classDocBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(DocBlockStart);
			State = 378; luaNameTagLine();
			State = 380;
			_la = TokenStream.La(1);
			if (_la==TextTag) {
				{
				State = 379; textTagLine();
				}
			}

			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (ConstTag - 77)) | (1L << (FlagTag - 77)) | (1L << (AttributeTag - 77)))) != 0)) {
				{
				State = 385;
				switch (TokenStream.La(1)) {
				case ConstTag:
					{
					State = 382; constTagLine();
					}
					break;
				case FlagTag:
					{
					State = 383; flagTagLine();
					}
					break;
				case AttributeTag:
					{
					State = 384; attributeTagLine();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 390; Match(DocBlockEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDocBlockContext : ParserRuleContext {
		public ITerminalNode DocBlockStart() { return GetToken(CppParser.DocBlockStart, 0); }
		public LuaNameTagLineContext luaNameTagLine() {
			return GetRuleContext<LuaNameTagLineContext>(0);
		}
		public OverloadListContext overloadList() {
			return GetRuleContext<OverloadListContext>(0);
		}
		public ITerminalNode DocBlockEnd() { return GetToken(CppParser.DocBlockEnd, 0); }
		public TextTagLineContext textTagLine() {
			return GetRuleContext<TextTagLineContext>(0);
		}
		public FunctionDocBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDocBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFunctionDocBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFunctionDocBlock(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDocBlockContext functionDocBlock() {
		FunctionDocBlockContext _localctx = new FunctionDocBlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionDocBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(DocBlockStart);
			State = 393; luaNameTagLine();
			State = 395;
			_la = TokenStream.La(1);
			if (_la==TextTag) {
				{
				State = 394; textTagLine();
				}
			}

			State = 397; overloadList();
			State = 398; Match(DocBlockEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LuaNameTagLineContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode LuaNameTag() { return GetToken(CppParser.LuaNameTag, 0); }
		public ITerminalNode DocWord() { return GetToken(CppParser.DocWord, 0); }
		public LuaNameTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_luaNameTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterLuaNameTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitLuaNameTagLine(this);
		}
	}

	[RuleVersion(0)]
	public LuaNameTagLineContext luaNameTagLine() {
		LuaNameTagLineContext _localctx = new LuaNameTagLineContext(Context, State);
		EnterRule(_localctx, 56, RULE_luaNameTagLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(LuaNameTag);
			State = 401; _localctx.name = Match(DocWord);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextTagLineContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode TextTag() { return GetToken(CppParser.TextTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public TextTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTextTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTextTagLine(this);
		}
	}

	[RuleVersion(0)]
	public TextTagLineContext textTagLine() {
		TextTagLineContext _localctx = new TextTagLineContext(Context, State);
		EnterRule(_localctx, 58, RULE_textTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(TextTag);
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 404; _localctx.text = Match(DocWord);
				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==DocWord );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTagLineContext : ParserRuleContext {
		public IToken name;
		public IToken text;
		public ITerminalNode ConstTag() { return GetToken(CppParser.ConstTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public ConstTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterConstTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitConstTagLine(this);
		}
	}

	[RuleVersion(0)]
	public ConstTagLineContext constTagLine() {
		ConstTagLineContext _localctx = new ConstTagLineContext(Context, State);
		EnterRule(_localctx, 60, RULE_constTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(ConstTag);
			State = 410; _localctx.name = Match(DocWord);
			State = 416;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 411; _localctx.text = Match(DocWord);
					}
					}
					State = 414;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==DocWord );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagTagLineContext : ParserRuleContext {
		public IToken name;
		public IToken text;
		public ITerminalNode FlagTag() { return GetToken(CppParser.FlagTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public FlagTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flagTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFlagTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFlagTagLine(this);
		}
	}

	[RuleVersion(0)]
	public FlagTagLineContext flagTagLine() {
		FlagTagLineContext _localctx = new FlagTagLineContext(Context, State);
		EnterRule(_localctx, 62, RULE_flagTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(FlagTag);
			State = 419; _localctx.name = Match(DocWord);
			State = 425;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 420; _localctx.text = Match(DocWord);
					}
					}
					State = 423;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==DocWord );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTagLineContext : ParserRuleContext {
		public IToken name;
		public IToken text;
		public ITerminalNode AttributeTag() { return GetToken(CppParser.AttributeTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public AttributeTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterAttributeTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitAttributeTagLine(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTagLineContext attributeTagLine() {
		AttributeTagLineContext _localctx = new AttributeTagLineContext(Context, State);
		EnterRule(_localctx, 64, RULE_attributeTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(AttributeTag);
			State = 428; _localctx.name = Match(DocWord);
			State = 434;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 429; _localctx.text = Match(DocWord);
					}
					}
					State = 432;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==DocWord );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadListContext : ParserRuleContext {
		public OverloadBlockContext[] overloadBlock() {
			return GetRuleContexts<OverloadBlockContext>();
		}
		public OverloadBlockContext overloadBlock(int i) {
			return GetRuleContext<OverloadBlockContext>(i);
		}
		public OverloadTagLineContext[] overloadTagLine() {
			return GetRuleContexts<OverloadTagLineContext>();
		}
		public OverloadTagLineContext overloadTagLine(int i) {
			return GetRuleContext<OverloadTagLineContext>(i);
		}
		public OverloadListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOverloadList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOverloadList(this);
		}
	}

	[RuleVersion(0)]
	public OverloadListContext overloadList() {
		OverloadListContext _localctx = new OverloadListContext(Context, State);
		EnterRule(_localctx, 66, RULE_overloadList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 436; overloadTagLine();
				}
				break;
			}
			State = 439; overloadBlock();
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OverloadTag) {
				{
				{
				State = 440; overloadTagLine();
				State = 441; overloadBlock();
				}
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadTagLineContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode OverloadTag() { return GetToken(CppParser.OverloadTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public OverloadTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOverloadTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOverloadTagLine(this);
		}
	}

	[RuleVersion(0)]
	public OverloadTagLineContext overloadTagLine() {
		OverloadTagLineContext _localctx = new OverloadTagLineContext(Context, State);
		EnterRule(_localctx, 68, RULE_overloadTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(OverloadTag);
			State = 454;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 449; _localctx.text = Match(DocWord);
					}
					}
					State = 452;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==DocWord );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadBlockContext : ParserRuleContext {
		public InParamTagLineContext[] inParamTagLine() {
			return GetRuleContexts<InParamTagLineContext>();
		}
		public InParamTagLineContext inParamTagLine(int i) {
			return GetRuleContext<InParamTagLineContext>(i);
		}
		public OptionalInParamTagLineContext[] optionalInParamTagLine() {
			return GetRuleContexts<OptionalInParamTagLineContext>();
		}
		public OptionalInParamTagLineContext optionalInParamTagLine(int i) {
			return GetRuleContext<OptionalInParamTagLineContext>(i);
		}
		public OutParamTagLineContext[] outParamTagLine() {
			return GetRuleContexts<OutParamTagLineContext>();
		}
		public OutParamTagLineContext outParamTagLine(int i) {
			return GetRuleContext<OutParamTagLineContext>(i);
		}
		public OverloadBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOverloadBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOverloadBlock(this);
		}
	}

	[RuleVersion(0)]
	public OverloadBlockContext overloadBlock() {
		OverloadBlockContext _localctx = new OverloadBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_overloadBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==InParamTag) {
				{
				{
				State = 456; inParamTagLine();
				}
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OptionalInParamTag) {
				{
				{
				State = 462; optionalInParamTagLine();
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OutParamTag) {
				{
				{
				State = 468; outParamTagLine();
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InParamTagLineContext : ParserRuleContext {
		public IToken paramType;
		public IToken name;
		public IToken text;
		public ITerminalNode InParamTag() { return GetToken(CppParser.InParamTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public InParamTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inParamTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterInParamTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitInParamTagLine(this);
		}
	}

	[RuleVersion(0)]
	public InParamTagLineContext inParamTagLine() {
		InParamTagLineContext _localctx = new InParamTagLineContext(Context, State);
		EnterRule(_localctx, 72, RULE_inParamTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; Match(InParamTag);
			State = 475; _localctx.paramType = Match(DocWord);
			State = 484;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 476; _localctx.name = Match(DocWord);
				State = 482;
				_la = TokenStream.La(1);
				if (_la==DocWord) {
					{
					State = 478;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					do {
						{
						{
						State = 477; _localctx.text = Match(DocWord);
						}
						}
						State = 480;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					} while ( _la==DocWord );
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalInParamTagLineContext : ParserRuleContext {
		public IToken paramType;
		public IToken name;
		public IToken text;
		public ITerminalNode OptionalInParamTag() { return GetToken(CppParser.OptionalInParamTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public OptionalInParamTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalInParamTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOptionalInParamTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOptionalInParamTagLine(this);
		}
	}

	[RuleVersion(0)]
	public OptionalInParamTagLineContext optionalInParamTagLine() {
		OptionalInParamTagLineContext _localctx = new OptionalInParamTagLineContext(Context, State);
		EnterRule(_localctx, 74, RULE_optionalInParamTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(OptionalInParamTag);
			State = 487; _localctx.paramType = Match(DocWord);
			State = 496;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 488; _localctx.name = Match(DocWord);
				State = 494;
				_la = TokenStream.La(1);
				if (_la==DocWord) {
					{
					State = 490;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					do {
						{
						{
						State = 489; _localctx.text = Match(DocWord);
						}
						}
						State = 492;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					} while ( _la==DocWord );
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutParamTagLineContext : ParserRuleContext {
		public IToken paramType;
		public IToken name;
		public IToken text;
		public ITerminalNode OutParamTag() { return GetToken(CppParser.OutParamTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public OutParamTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outParamTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOutParamTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOutParamTagLine(this);
		}
	}

	[RuleVersion(0)]
	public OutParamTagLineContext outParamTagLine() {
		OutParamTagLineContext _localctx = new OutParamTagLineContext(Context, State);
		EnterRule(_localctx, 76, RULE_outParamTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; Match(OutParamTag);
			State = 499; _localctx.paramType = Match(DocWord);
			State = 508;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 500; _localctx.name = Match(DocWord);
				State = 506;
				_la = TokenStream.La(1);
				if (_la==DocWord) {
					{
					State = 502;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					do {
						{
						{
						State = 501; _localctx.text = Match(DocWord);
						}
						}
						State = 504;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					} while ( _la==DocWord );
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return declarator_sempred((DeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool declarator_sempred(DeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3Y\x201\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x3\x2\a\x2R\n"+
		"\x2\f\x2\xE\x2U\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\a\x3\x62\n\x3\f\x3\xE\x3\x65\v\x3\x3\x3\x3\x3\x3\x3\x5"+
		"\x3j\n\x3\x3\x3\x3\x3\a\x3n\n\x3\f\x3\xE\x3q\v\x3\x3\x3\x3\x3\x5\x3u\n"+
		"\x3\x3\x4\x3\x4\x5\x4y\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x80\n"+
		"\x4\x3\x4\x3\x4\x3\x4\x5\x4\x85\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5\x8B"+
		"\n\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\a\x6\x93\n\x6\f\x6\xE\x6\x96"+
		"\v\x6\x3\x6\x3\x6\x3\a\x5\a\x9B\n\a\x3\a\x3\a\x5\a\x9F\n\a\x3\a\x3\a\x3"+
		"\a\x3\b\x5\b\xA5\n\b\x3\b\x5\b\xA8\n\b\x3\b\x3\b\x5\b\xAC\n\b\x3\b\x3"+
		"\b\x3\b\x5\b\xB1\n\b\x5\b\xB3\n\b\x3\b\x3\b\x5\b\xB7\n\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\x3\t\a\t\xBF\n\t\f\t\xE\t\xC2\v\t\x3\n\x3\n\x5\n\xC6\n\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xCD\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\a\f\xDC\n\f\f\f\xE\f\xDF\v\f\x3\r\x3"+
		"\r\x5\r\xE3\n\r\x3\r\x3\r\x3\r\x3\r\a\r\xE9\n\r\f\r\xE\r\xEC\v\r\x5\r"+
		"\xEE\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\xFA\n\xE\x3\xE\x5\xE\xFD\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x103\n"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x109\n\xE\x3\xE\a\xE\x10C\n\xE\f\xE"+
		"\xE\xE\x10F\v\xE\x3\xF\x3\xF\x3\xF\x3\x10\x5\x10\x115\n\x10\x3\x10\x3"+
		"\x10\x5\x10\x119\n\x10\x3\x10\x5\x10\x11C\n\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\a\x11\x122\n\x11\f\x11\xE\x11\x125\v\x11\x5\x11\x127\n\x11\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\x5\x12\x12E\n\x12\x3\x12\x5\x12\x131\n\x12"+
		"\x3\x12\x3\x12\x3\x12\x5\x12\x136\n\x12\x5\x12\x138\n\x12\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\a\x13\x13E\n\x13\f\x13\xE\x13\x141\v\x13\x5\x13\x143\n"+
		"\x13\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14\x149\n\x14\x3\x15\x3\x15\x3\x15"+
		"\x5\x15\x14E\n\x15\x3\x15\x6\x15\x151\n\x15\r\x15\xE\x15\x152\x5\x15\x155"+
		"\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x167\n\x19\f\x19"+
		"\xE\x19\x16A\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x6\x1A\x170\n\x1A\r\x1A"+
		"\xE\x1A\x171\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x6\x1B\x178\n\x1B\r\x1B\xE\x1B"+
		"\x179\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x17F\n\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C"+
		"\x184\n\x1C\f\x1C\xE\x1C\x187\v\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D"+
		"\x5\x1D\x18E\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3"+
		"\x1F\x6\x1F\x198\n\x1F\r\x1F\xE\x1F\x199\x3 \x3 \x3 \x6 \x19F\n \r \xE"+
		" \x1A0\x5 \x1A3\n \x3!\x3!\x3!\x6!\x1A8\n!\r!\xE!\x1A9\x5!\x1AC\n!\x3"+
		"\"\x3\"\x3\"\x6\"\x1B1\n\"\r\"\xE\"\x1B2\x5\"\x1B5\n\"\x3#\x5#\x1B8\n"+
		"#\x3#\x3#\x3#\x3#\a#\x1BE\n#\f#\xE#\x1C1\v#\x3$\x3$\x6$\x1C5\n$\r$\xE"+
		"$\x1C6\x5$\x1C9\n$\x3%\a%\x1CC\n%\f%\xE%\x1CF\v%\x3%\a%\x1D2\n%\f%\xE"+
		"%\x1D5\v%\x3%\a%\x1D8\n%\f%\xE%\x1DB\v%\x3&\x3&\x3&\x3&\x6&\x1E1\n&\r"+
		"&\xE&\x1E2\x5&\x1E5\n&\x5&\x1E7\n&\x3\'\x3\'\x3\'\x3\'\x6\'\x1ED\n\'\r"+
		"\'\xE\'\x1EE\x5\'\x1F1\n\'\x5\'\x1F3\n\'\x3(\x3(\x3(\x3(\x6(\x1F9\n(\r"+
		"(\xE(\x1FA\x5(\x1FD\n(\x5(\x1FF\n(\x3(\x3\x94\x3\x1A)\x2\x4\x6\b\n\f\xE"+
		"\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLN\x2\x6\x3\x2\x32\x35\x3\x2\x4\t\x4\x2\x4\t !\x5\x2\x4\n\f"+
		"\f !\x23D\x2S\x3\x2\x2\x2\x4t\x3\x2\x2\x2\x6x\x3\x2\x2\x2\b\x88\x3\x2"+
		"\x2\x2\n\x8F\x3\x2\x2\x2\f\x9A\x3\x2\x2\x2\xE\xA4\x3\x2\x2\x2\x10\xBA"+
		"\x3\x2\x2\x2\x12\xC5\x3\x2\x2\x2\x14\xD0\x3\x2\x2\x2\x16\xD7\x3\x2\x2"+
		"\x2\x18\xE2\x3\x2\x2\x2\x1A\x102\x3\x2\x2\x2\x1C\x110\x3\x2\x2\x2\x1E"+
		"\x11B\x3\x2\x2\x2 \x11D\x3\x2\x2\x2\"\x12D\x3\x2\x2\x2$\x139\x3\x2\x2"+
		"\x2&\x148\x3\x2\x2\x2(\x154\x3\x2\x2\x2*\x156\x3\x2\x2\x2,\x15A\x3\x2"+
		"\x2\x2.\x15E\x3\x2\x2\x2\x30\x168\x3\x2\x2\x2\x32\x16F\x3\x2\x2\x2\x34"+
		"\x177\x3\x2\x2\x2\x36\x17B\x3\x2\x2\x2\x38\x18A\x3\x2\x2\x2:\x192\x3\x2"+
		"\x2\x2<\x195\x3\x2\x2\x2>\x19B\x3\x2\x2\x2@\x1A4\x3\x2\x2\x2\x42\x1AD"+
		"\x3\x2\x2\x2\x44\x1B7\x3\x2\x2\x2\x46\x1C2\x3\x2\x2\x2H\x1CD\x3\x2\x2"+
		"\x2J\x1DC\x3\x2\x2\x2L\x1E8\x3\x2\x2\x2N\x1F4\x3\x2\x2\x2PR\x5\x4\x3\x2"+
		"QP\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2TV\x3\x2\x2\x2"+
		"US\x3\x2\x2\x2VW\a\x2\x2\x3W\x3\x3\x2\x2\x2Xu\x5\x6\x4\x2Yu\x5\b\x5\x2"+
		"Zu\x5\n\x6\x2[u\x5\f\a\x2\\u\x5\xE\b\x2]u\x5\x12\n\x2^u\x5\x14\v\x2_\x63"+
		"\a\b\x2\x2`\x62\x5\x4\x3\x2\x61`\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61"+
		"\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x66\x3\x2\x2\x2\x65\x63\x3\x2\x2"+
		"\x2\x66u\a\t\x2\x2gi\a\x39\x2\x2hj\aK\x2\x2ih\x3\x2\x2\x2ij\x3\x2\x2\x2"+
		"jk\x3\x2\x2\x2ko\a\b\x2\x2ln\x5\x4\x3\x2ml\x3\x2\x2\x2nq\x3\x2\x2\x2o"+
		"m\x3\x2\x2\x2op\x3\x2\x2\x2pr\x3\x2\x2\x2qo\x3\x2\x2\x2ru\a\t\x2\x2su"+
		"\a \x2\x2tX\x3\x2\x2\x2tY\x3\x2\x2\x2tZ\x3\x2\x2\x2t[\x3\x2\x2\x2t\\\x3"+
		"\x2\x2\x2t]\x3\x2\x2\x2t^\x3\x2\x2\x2t_\x3\x2\x2\x2tg\x3\x2\x2\x2ts\x3"+
		"\x2\x2\x2u\x5\x3\x2\x2\x2vw\a\x37\x2\x2wy\x5 \x11\x2xv\x3\x2\x2\x2xy\x3"+
		"\x2\x2\x2y\x7F\x3\x2\x2\x2z\x80\x5\x1E\x10\x2{\x80\a\x32\x2\x2|\x80\a"+
		"\x33\x2\x2}\x80\a\x34\x2\x2~\x80\a\x35\x2\x2\x7Fz\x3\x2\x2\x2\x7F{\x3"+
		"\x2\x2\x2\x7F|\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F~\x3\x2\x2\x2\x80\x81\x3"+
		"\x2\x2\x2\x81\x84\x5\x1A\xE\x2\x82\x83\a\"\x2\x2\x83\x85\x5\x32\x1A\x2"+
		"\x84\x82\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87\a"+
		" \x2\x2\x87\a\x3\x2\x2\x2\x88\x8A\a\x36\x2\x2\x89\x8B\t\x2\x2\x2\x8A\x89"+
		"\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\x5\x1C\xF"+
		"\x2\x8D\x8E\a \x2\x2\x8E\t\x3\x2\x2\x2\x8F\x90\a:\x2\x2\x90\x94\a\x39"+
		"\x2\x2\x91\x93\v\x2\x2\x2\x92\x91\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94"+
		"\x95\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x95\x97\x3\x2\x2\x2\x96\x94\x3\x2"+
		"\x2\x2\x97\x98\a \x2\x2\x98\v\x3\x2\x2\x2\x99\x9B\x5\x38\x1D\x2\x9A\x99"+
		"\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9D\a\x37\x2"+
		"\x2\x9D\x9F\x5 \x11\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0"+
		"\x3\x2\x2\x2\xA0\xA1\x5\x1C\xF\x2\xA1\xA2\x5*\x16\x2\xA2\r\x3\x2\x2\x2"+
		"\xA3\xA5\x5\x36\x1C\x2\xA4\xA3\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA7"+
		"\x3\x2\x2\x2\xA6\xA8\a\x36\x2\x2\xA7\xA6\x3\x2\x2\x2\xA7\xA8\x3\x2\x2"+
		"\x2\xA8\xAB\x3\x2\x2\x2\xA9\xAA\a\x37\x2\x2\xAA\xAC\x5 \x11\x2\xAB\xA9"+
		"\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xB2\t\x2\x2\x2"+
		"\xAE\xB0\x5\x1E\x10\x2\xAF\xB1\x5\x10\t\x2\xB0\xAF\x3\x2\x2\x2\xB0\xB1"+
		"\x3\x2\x2\x2\xB1\xB3\x3\x2\x2\x2\xB2\xAE\x3\x2\x2\x2\xB2\xB3\x3\x2\x2"+
		"\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB6\x5*\x16\x2\xB5\xB7\aK\x2\x2\xB6\xB5\x3"+
		"\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\a \x2\x2\xB9"+
		"\xF\x3\x2\x2\x2\xBA\xBB\a\x1F\x2\x2\xBB\xC0\x5\x1E\x10\x2\xBC\xBD\a!\x2"+
		"\x2\xBD\xBF\x5\x1E\x10\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0"+
		"\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\x11\x3\x2\x2\x2\xC2\xC0\x3\x2"+
		"\x2\x2\xC3\xC4\a\x37\x2\x2\xC4\xC6\x5 \x11\x2\xC5\xC3\x3\x2\x2\x2\xC5"+
		"\xC6\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC8\x5\x1E\x10\x2\xC8\xC9\a\x3"+
		"\x2\x2\xC9\xCA\aK\x2\x2\xCA\xCC\x5.\x18\x2\xCB\xCD\x5\x16\f\x2\xCC\xCB"+
		"\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF\x5*\x16\x2"+
		"\xCF\x13\x3\x2\x2\x2\xD0\xD1\x5\x1E\x10\x2\xD1\xD2\a\x3\x2\x2\xD2\xD3"+
		"\a\x1D\x2\x2\xD3\xD4\aK\x2\x2\xD4\xD5\x5.\x18\x2\xD5\xD6\x5*\x16\x2\xD6"+
		"\x15\x3\x2\x2\x2\xD7\xD8\a\x1F\x2\x2\xD8\xDD\x5\x18\r\x2\xD9\xDA\a!\x2"+
		"\x2\xDA\xDC\x5\x18\r\x2\xDB\xD9\x3\x2\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDB"+
		"\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\x17\x3\x2\x2\x2\xDF\xDD\x3\x2\x2"+
		"\x2\xE0\xE3\aK\x2\x2\xE1\xE3\x5\x1E\x10\x2\xE2\xE0\x3\x2\x2\x2\xE2\xE1"+
		"\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xED\a\x4\x2\x2\xE5\xEA\x5\x32\x1A"+
		"\x2\xE6\xE7\a!\x2\x2\xE7\xE9\x5\x32\x1A\x2\xE8\xE6\x3\x2\x2\x2\xE9\xEC"+
		"\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEE\x3\x2\x2"+
		"\x2\xEC\xEA\x3\x2\x2\x2\xED\xE5\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF"+
		"\x3\x2\x2\x2\xEF\xF0\a\x5\x2\x2\xF0\x19\x3\x2\x2\x2\xF1\xF2\b\xE\x1\x2"+
		"\xF2\xF3\a\x14\x2\x2\xF3\x103\x5\x1A\xE\x5\xF4\xF5\a\x17\x2\x2\xF5\x103"+
		"\x5\x1A\xE\x4\xF6\xF7\x5\x1E\x10\x2\xF7\xF8\a\x3\x2\x2\xF8\xFA\x3\x2\x2"+
		"\x2\xF9\xF6\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xFC\x3\x2\x2\x2\xFB\xFD"+
		"\aK\x2\x2\xFC\xFB\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\x103\x3\x2\x2\x2"+
		"\xFE\xFF\a\x4\x2\x2\xFF\x100\x5\x1A\xE\x2\x100\x101\a\x5\x2\x2\x101\x103"+
		"\x3\x2\x2\x2\x102\xF1\x3\x2\x2\x2\x102\xF4\x3\x2\x2\x2\x102\xF9\x3\x2"+
		"\x2\x2\x102\xFE\x3\x2\x2\x2\x103\x10D\x3\x2\x2\x2\x104\x105\f\a\x2\x2"+
		"\x105\x10C\x5,\x17\x2\x106\x108\f\x6\x2\x2\x107\x109\x5$\x13\x2\x108\x107"+
		"\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10C\x5"+
		".\x18\x2\x10B\x104\x3\x2\x2\x2\x10B\x106\x3\x2\x2\x2\x10C\x10F\x3\x2\x2"+
		"\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x1B\x3\x2\x2\x2\x10F"+
		"\x10D\x3\x2\x2\x2\x110\x111\x5\x1E\x10\x2\x111\x112\x5\x1A\xE\x2\x112"+
		"\x1D\x3\x2\x2\x2\x113\x115\x5(\x15\x2\x114\x113\x3\x2\x2\x2\x114\x115"+
		"\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x118\aK\x2\x2\x117\x119\x5$\x13"+
		"\x2\x118\x117\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119\x11C\x3\x2\x2\x2"+
		"\x11A\x11C\a@\x2\x2\x11B\x114\x3\x2\x2\x2\x11B\x11A\x3\x2\x2\x2\x11C\x1F"+
		"\x3\x2\x2\x2\x11D\x126\a\n\x2\x2\x11E\x123\x5\"\x12\x2\x11F\x120\a!\x2"+
		"\x2\x120\x122\x5\"\x12\x2\x121\x11F\x3\x2\x2\x2\x122\x125\x3\x2\x2\x2"+
		"\x123\x121\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x127\x3\x2\x2\x2\x125"+
		"\x123\x3\x2\x2\x2\x126\x11E\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x128"+
		"\x3\x2\x2\x2\x128\x129\a\f\x2\x2\x129!\x3\x2\x2\x2\x12A\x12E\x5\x1C\xF"+
		"\x2\x12B\x12E\a\x38\x2\x2\x12C\x12E\a\x32\x2\x2\x12D\x12A\x3\x2\x2\x2"+
		"\x12D\x12B\x3\x2\x2\x2\x12D\x12C\x3\x2\x2\x2\x12E\x130\x3\x2\x2\x2\x12F"+
		"\x131\aK\x2\x2\x130\x12F\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x137\x3"+
		"\x2\x2\x2\x132\x135\a\"\x2\x2\x133\x136\x5\x1C\xF\x2\x134\x136\x5\x34"+
		"\x1B\x2\x135\x133\x3\x2\x2\x2\x135\x134\x3\x2\x2\x2\x136\x138\x3\x2\x2"+
		"\x2\x137\x132\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138#\x3\x2\x2\x2\x139"+
		"\x142\a\n\x2\x2\x13A\x13F\x5&\x14\x2\x13B\x13C\a!\x2\x2\x13C\x13E\x5&"+
		"\x14\x2\x13D\x13B\x3\x2\x2\x2\x13E\x141\x3\x2\x2\x2\x13F\x13D\x3\x2\x2"+
		"\x2\x13F\x140\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2"+
		"\x142\x13A\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144"+
		"\x145\a\f\x2\x2\x145%\x3\x2\x2\x2\x146\x149\x5\x1C\xF\x2\x147\x149\x5"+
		"\x34\x1B\x2\x148\x146\x3\x2\x2\x2\x148\x147\x3\x2\x2\x2\x149\'\x3\x2\x2"+
		"\x2\x14A\x155\a\x3\x2\x2\x14B\x14D\aK\x2\x2\x14C\x14E\x5$\x13\x2\x14D"+
		"\x14C\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x151"+
		"\a\x3\x2\x2\x150\x14B\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x150\x3\x2"+
		"\x2\x2\x152\x153\x3\x2\x2\x2\x153\x155\x3\x2\x2\x2\x154\x14A\x3\x2\x2"+
		"\x2\x154\x150\x3\x2\x2\x2\x155)\x3\x2\x2\x2\x156\x157\a\b\x2\x2\x157\x158"+
		"\x5\x30\x19\x2\x158\x159\a\t\x2\x2\x159+\x3\x2\x2\x2\x15A\x15B\a\x6\x2"+
		"\x2\x15B\x15C\x5\x30\x19\x2\x15C\x15D\a\a\x2\x2\x15D-\x3\x2\x2\x2\x15E"+
		"\x15F\a\x4\x2\x2\x15F\x160\x5\x30\x19\x2\x160\x161\a\x5\x2\x2\x161/\x3"+
		"\x2\x2\x2\x162\x167\n\x3\x2\x2\x163\x167\x5*\x16\x2\x164\x167\x5,\x17"+
		"\x2\x165\x167\x5.\x18\x2\x166\x162\x3\x2\x2\x2\x166\x163\x3\x2\x2\x2\x166"+
		"\x164\x3\x2\x2\x2\x166\x165\x3\x2\x2\x2\x167\x16A\x3\x2\x2\x2\x168\x166"+
		"\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x31\x3\x2\x2\x2\x16A\x168\x3\x2"+
		"\x2\x2\x16B\x170\x5*\x16\x2\x16C\x170\x5,\x17\x2\x16D\x170\x5.\x18\x2"+
		"\x16E\x170\n\x4\x2\x2\x16F\x16B\x3\x2\x2\x2\x16F\x16C\x3\x2\x2\x2\x16F"+
		"\x16D\x3\x2\x2\x2\x16F\x16E\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x16F"+
		"\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172\x33\x3\x2\x2\x2\x173\x178\x5*"+
		"\x16\x2\x174\x178\x5,\x17\x2\x175\x178\x5.\x18\x2\x176\x178\n\x5\x2\x2"+
		"\x177\x173\x3\x2\x2\x2\x177\x174\x3\x2\x2\x2\x177\x175\x3\x2\x2\x2\x177"+
		"\x176\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2\x179\x17A"+
		"\x3\x2\x2\x2\x17A\x35\x3\x2\x2\x2\x17B\x17C\a\x46\x2\x2\x17C\x17E\x5:"+
		"\x1E\x2\x17D\x17F\x5<\x1F\x2\x17E\x17D\x3\x2\x2\x2\x17E\x17F\x3\x2\x2"+
		"\x2\x17F\x185\x3\x2\x2\x2\x180\x184\x5> \x2\x181\x184\x5@!\x2\x182\x184"+
		"\x5\x42\"\x2\x183\x180\x3\x2\x2\x2\x183\x181\x3\x2\x2\x2\x183\x182\x3"+
		"\x2\x2\x2\x184\x187\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2\x185\x186\x3\x2"+
		"\x2\x2\x186\x188\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2\x188\x189\aL\x2\x2"+
		"\x189\x37\x3\x2\x2\x2\x18A\x18B\a\x46\x2\x2\x18B\x18D\x5:\x1E\x2\x18C"+
		"\x18E\x5<\x1F\x2\x18D\x18C\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E\x18F"+
		"\x3\x2\x2\x2\x18F\x190\x5\x44#\x2\x190\x191\aL\x2\x2\x191\x39\x3\x2\x2"+
		"\x2\x192\x193\aM\x2\x2\x193\x194\aW\x2\x2\x194;\x3\x2\x2\x2\x195\x197"+
		"\aN\x2\x2\x196\x198\aW\x2\x2\x197\x196\x3\x2\x2\x2\x198\x199\x3\x2\x2"+
		"\x2\x199\x197\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A=\x3\x2\x2\x2\x19B"+
		"\x19C\aO\x2\x2\x19C\x1A2\aW\x2\x2\x19D\x19F\aW\x2\x2\x19E\x19D\x3\x2\x2"+
		"\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2"+
		"\x1A1\x1A3\x3\x2\x2\x2\x1A2\x19E\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3"+
		"?\x3\x2\x2\x2\x1A4\x1A5\aP\x2\x2\x1A5\x1AB\aW\x2\x2\x1A6\x1A8\aW\x2\x2"+
		"\x1A7\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1A7\x3\x2\x2\x2\x1A9"+
		"\x1AA\x3\x2\x2\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1A7\x3\x2\x2\x2\x1AB\x1AC"+
		"\x3\x2\x2\x2\x1AC\x41\x3\x2\x2\x2\x1AD\x1AE\aQ\x2\x2\x1AE\x1B4\aW\x2\x2"+
		"\x1AF\x1B1\aW\x2\x2\x1B0\x1AF\x3\x2\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B0"+
		"\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B5\x3\x2\x2\x2\x1B4\x1B0\x3"+
		"\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x43\x3\x2\x2\x2\x1B6\x1B8\x5\x46"+
		"$\x2\x1B7\x1B6\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2"+
		"\x1B9\x1BF\x5H%\x2\x1BA\x1BB\x5\x46$\x2\x1BB\x1BC\x5H%\x2\x1BC\x1BE\x3"+
		"\x2\x2\x2\x1BD\x1BA\x3\x2\x2\x2\x1BE\x1C1\x3\x2\x2\x2\x1BF\x1BD\x3\x2"+
		"\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0\x45\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2"+
		"\x1C2\x1C8\aU\x2\x2\x1C3\x1C5\aW\x2\x2\x1C4\x1C3\x3\x2\x2\x2\x1C5\x1C6"+
		"\x3\x2\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1C9\x3"+
		"\x2\x2\x2\x1C8\x1C4\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9G\x3\x2\x2\x2"+
		"\x1CA\x1CC\x5J&\x2\x1CB\x1CA\x3\x2\x2\x2\x1CC\x1CF\x3\x2\x2\x2\x1CD\x1CB"+
		"\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1D3\x3\x2\x2\x2\x1CF\x1CD\x3"+
		"\x2\x2\x2\x1D0\x1D2\x5L\'\x2\x1D1\x1D0\x3\x2\x2\x2\x1D2\x1D5\x3\x2\x2"+
		"\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D9\x3\x2\x2\x2"+
		"\x1D5\x1D3\x3\x2\x2\x2\x1D6\x1D8\x5N(\x2\x1D7\x1D6\x3\x2\x2\x2\x1D8\x1DB"+
		"\x3\x2\x2\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DAI\x3\x2\x2"+
		"\x2\x1DB\x1D9\x3\x2\x2\x2\x1DC\x1DD\aR\x2\x2\x1DD\x1E6\aW\x2\x2\x1DE\x1E4"+
		"\aW\x2\x2\x1DF\x1E1\aW\x2\x2\x1E0\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2"+
		"\x2\x1E2\x1E0\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E5\x3\x2\x2\x2"+
		"\x1E4\x1E0\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E7\x3\x2\x2\x2\x1E6"+
		"\x1DE\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7K\x3\x2\x2\x2\x1E8\x1E9\a"+
		"S\x2\x2\x1E9\x1F2\aW\x2\x2\x1EA\x1F0\aW\x2\x2\x1EB\x1ED\aW\x2\x2\x1EC"+
		"\x1EB\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF"+
		"\x3\x2\x2\x2\x1EF\x1F1\x3\x2\x2\x2\x1F0\x1EC\x3\x2\x2\x2\x1F0\x1F1\x3"+
		"\x2\x2\x2\x1F1\x1F3\x3\x2\x2\x2\x1F2\x1EA\x3\x2\x2\x2\x1F2\x1F3\x3\x2"+
		"\x2\x2\x1F3M\x3\x2\x2\x2\x1F4\x1F5\aT\x2\x2\x1F5\x1FE\aW\x2\x2\x1F6\x1FC"+
		"\aW\x2\x2\x1F7\x1F9\aW\x2\x2\x1F8\x1F7\x3\x2\x2\x2\x1F9\x1FA\x3\x2\x2"+
		"\x2\x1FA\x1F8\x3\x2\x2\x2\x1FA\x1FB\x3\x2\x2\x2\x1FB\x1FD\x3\x2\x2\x2"+
		"\x1FC\x1F8\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FF\x3\x2\x2\x2\x1FE"+
		"\x1F6\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FFO\x3\x2\x2\x2QS\x63iotx\x7F"+
		"\x84\x8A\x94\x9A\x9E\xA4\xA7\xAB\xB0\xB2\xB6\xC0\xC5\xCC\xDD\xE2\xEA\xED"+
		"\xF9\xFC\x102\x108\x10B\x10D\x114\x118\x11B\x123\x126\x12D\x130\x135\x137"+
		"\x13F\x142\x148\x14D\x152\x154\x166\x168\x16F\x171\x177\x179\x17E\x183"+
		"\x185\x18D\x199\x1A0\x1A2\x1A9\x1AB\x1B2\x1B4\x1B7\x1BF\x1C6\x1C8\x1CD"+
		"\x1D3\x1D9\x1E2\x1E4\x1E6\x1EE\x1F0\x1F2\x1FA\x1FC\x1FE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CppParser
