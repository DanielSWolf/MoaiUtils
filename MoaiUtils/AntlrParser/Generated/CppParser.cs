//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CppParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace CppParser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CppParser : Parser {
	public const int
		Scope=1, LeftParen=2, RightParen=3, LeftBracket=4, RightBracket=5, LeftBrace=6, 
		RightBrace=7, Less=8, LessEqual=9, Greater=10, GreaterEqual=11, LeftShift=12, 
		RightShift=13, Plus=14, PlusPlus=15, Minus=16, MinusMinus=17, Star=18, 
		Div=19, Mod=20, And=21, Or=22, AndAnd=23, OrOr=24, Caret=25, Not=26, Tilde=27, 
		Question=28, Colon=29, Semi=30, Comma=31, Assign=32, StarAssign=33, DivAssign=34, 
		ModAssign=35, PlusAssign=36, MinusAssign=37, LeftShiftAssign=38, RightShiftAssign=39, 
		AndAssign=40, XorAssign=41, OrAssign=42, Equal=43, NotEqual=44, Arrow=45, 
		Dot=46, Ellipsis=47, Class=48, Struct=49, Union=50, Enum=51, TypeDef=52, 
		Template=53, TypeName=54, Namespace=55, Using=56, IntLiteral=57, FloatLiteral=58, 
		CharLiteral=59, StringLiteral=60, BoolLiteral=61, IntType=62, Modifier=63, 
		AccessSpecifier=64, Preproc=65, LineComment=66, BlockCommentStart=67, 
		DocBlockStart=68, Whitespace=69, ObjectiveCDirective=70, LinkageSpecification=71, 
		CommonMacro=72, Id=73, DocBlockEnd=74, LuaNameTag=75, TextTag=76, ConstTag=77, 
		FlagTag=78, AttributeTag=79, InParamTag=80, OptionalInParamTag=81, OutParamTag=82, 
		OverloadTag=83, UnknownTag=84, DocWord=85, DocWhitespace=86, BlockCommentEnd=87;
	public const int
		RULE_file = 0, RULE_topLevelStatement = 1, RULE_declaration = 2, RULE_typeDefinition = 3, 
		RULE_usingDirective = 4, RULE_functionDefinition = 5, RULE_baseClause = 6, 
		RULE_constructorDefinition = 7, RULE_destructorDefinition = 8, RULE_memberInitializerList = 9, 
		RULE_memberInitializer = 10, RULE_declarator = 11, RULE_type = 12, RULE_typeSpecifier = 13, 
		RULE_templateParamsBlock = 14, RULE_templateParam = 15, RULE_templateArgsBlock = 16, 
		RULE_templateArg = 17, RULE_nestedNameSpecifier = 18, RULE_bracesBlock = 19, 
		RULE_bracketsBlock = 20, RULE_parensBlock = 21, RULE_blockContent = 22, 
		RULE_expression = 23, RULE_expressionWithoutAngleBrackets = 24, RULE_classDocBlock = 25, 
		RULE_functionDocBlock = 26, RULE_luaNameTagLine = 27, RULE_textTagLine = 28, 
		RULE_constTagLine = 29, RULE_flagTagLine = 30, RULE_attributeTagLine = 31, 
		RULE_overloadList = 32, RULE_overloadTagLine = 33, RULE_overloadBlock = 34, 
		RULE_inParamTagLine = 35, RULE_optionalInParamTagLine = 36, RULE_outParamTagLine = 37, 
		RULE_description = 38;
	public static readonly string[] ruleNames = {
		"file", "topLevelStatement", "declaration", "typeDefinition", "usingDirective", 
		"functionDefinition", "baseClause", "constructorDefinition", "destructorDefinition", 
		"memberInitializerList", "memberInitializer", "declarator", "type", "typeSpecifier", 
		"templateParamsBlock", "templateParam", "templateArgsBlock", "templateArg", 
		"nestedNameSpecifier", "bracesBlock", "bracketsBlock", "parensBlock", 
		"blockContent", "expression", "expressionWithoutAngleBrackets", "classDocBlock", 
		"functionDocBlock", "luaNameTagLine", "textTagLine", "constTagLine", "flagTagLine", 
		"attributeTagLine", "overloadList", "overloadTagLine", "overloadBlock", 
		"inParamTagLine", "optionalInParamTagLine", "outParamTagLine", "description"
	};

	private static readonly string[] _LiteralNames = {
		null, "'::'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
		"'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
		"';'", "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'", 
		"'class'", "'struct'", "'union'", "'enum'", "'typedef'", "'template'", 
		"'typename'", "'namespace'", "'using'", null, null, null, null, null, 
		null, null, null, null, null, "'/*'", "'/**'", null, null, null, null, 
		null, null, null, "'@text'", "'@const'", "'@flag'", "'@attr'", "'@in'", 
		"'@opt'", "'@out'", "'@overload'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Scope", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
		"LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", 
		"LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
		"Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", "Tilde", 
		"Question", "Colon", "Semi", "Comma", "Assign", "StarAssign", "DivAssign", 
		"ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
		"AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", "Arrow", "Dot", 
		"Ellipsis", "Class", "Struct", "Union", "Enum", "TypeDef", "Template", 
		"TypeName", "Namespace", "Using", "IntLiteral", "FloatLiteral", "CharLiteral", 
		"StringLiteral", "BoolLiteral", "IntType", "Modifier", "AccessSpecifier", 
		"Preproc", "LineComment", "BlockCommentStart", "DocBlockStart", "Whitespace", 
		"ObjectiveCDirective", "LinkageSpecification", "CommonMacro", "Id", "DocBlockEnd", 
		"LuaNameTag", "TextTag", "ConstTag", "FlagTag", "AttributeTag", "InParamTag", 
		"OptionalInParamTag", "OutParamTag", "OverloadTag", "UnknownTag", "DocWord", 
		"DocWhitespace", "BlockCommentEnd"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CppParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CppParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CppParser.Eof, 0); }
		public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftBrace) | (1L << Semi) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << Namespace) | (1L << Using) | (1L << IntType))) != 0) || _la==DocBlockStart || _la==Id) {
				{
				{
				State = 78; topLevelStatement();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 84; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public UsingDirectiveContext usingDirective() {
			return GetRuleContext<UsingDirectiveContext>(0);
		}
		public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public ConstructorDefinitionContext constructorDefinition() {
			return GetRuleContext<ConstructorDefinitionContext>(0);
		}
		public DestructorDefinitionContext destructorDefinition() {
			return GetRuleContext<DestructorDefinitionContext>(0);
		}
		public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public ITerminalNode Namespace() { return GetToken(CppParser.Namespace, 0); }
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTopLevelStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTopLevelStatement(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStatementContext topLevelStatement() {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelStatement);
		int _la;
		try {
			State = 113;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; usingDirective();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; typeDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; functionDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 90; constructorDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; destructorDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 92; Match(LeftBrace);
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftBrace) | (1L << Semi) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << Namespace) | (1L << Using) | (1L << IntType))) != 0) || _la==DocBlockStart || _la==Id) {
					{
					{
					State = 93; topLevelStatement();
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 99; Match(RightBrace);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 100; Match(Namespace);
				State = 102;
				_la = TokenStream.La(1);
				if (_la==Id) {
					{
					State = 101; Match(Id);
					}
				}

				State = 104; Match(LeftBrace);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftBrace) | (1L << Semi) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << Namespace) | (1L << Using) | (1L << IntType))) != 0) || _la==DocBlockStart || _la==Id) {
					{
					{
					State = 105; topLevelStatement();
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 111; Match(RightBrace);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 112; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 115; Match(Template);
				State = 116; templateParamsBlock();
				}
			}

			State = 124;
			switch (TokenStream.La(1)) {
			case Scope:
			case IntType:
			case Id:
				{
				State = 119; typeSpecifier();
				}
				break;
			case Class:
				{
				State = 120; Match(Class);
				}
				break;
			case Struct:
				{
				State = 121; Match(Struct);
				}
				break;
			case Union:
				{
				State = 122; Match(Union);
				}
				break;
			case Enum:
				{
				State = 123; Match(Enum);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 126; declarator(0);
			State = 129;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 127; Match(Assign);
				State = 128; expression();
				}
			}

			State = 131; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
	 
		public TypeDefinitionContext() { }
		public virtual void CopyFrom(TypeDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypedefContext : TypeDefinitionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypedefContext(TypeDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTypedef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTypedef(this);
		}
	}
	public partial class ClassDefinitionContext : TypeDefinitionContext {
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public ClassDocBlockContext classDocBlock() {
			return GetRuleContext<ClassDocBlockContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public BaseClauseContext baseClause() {
			return GetRuleContext<BaseClauseContext>(0);
		}
		public ClassDefinitionContext(TypeDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDefinition);
		int _la;
		try {
			State = 163;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new TypedefContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; Match(TypeDef);
				State = 135;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum))) != 0)) {
					{
					State = 134;
					_la = TokenStream.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
				}

				State = 137; type();
				State = 138; Match(Semi);
				}
				break;
			case 2:
				_localctx = new ClassDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				_la = TokenStream.La(1);
				if (_la==DocBlockStart) {
					{
					State = 140; classDocBlock();
					}
				}

				State = 144;
				_la = TokenStream.La(1);
				if (_la==TypeDef) {
					{
					State = 143; Match(TypeDef);
					}
				}

				State = 148;
				_la = TokenStream.La(1);
				if (_la==Template) {
					{
					State = 146; Match(Template);
					State = 147; templateParamsBlock();
					}
				}

				State = 150;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 155;
				_la = TokenStream.La(1);
				if (_la==Scope || _la==IntType || _la==Id) {
					{
					State = 151; typeSpecifier();
					State = 153;
					_la = TokenStream.La(1);
					if (_la==Colon) {
						{
						State = 152; baseClause();
						}
					}

					}
				}

				State = 157; bracesBlock();
				State = 159;
				_la = TokenStream.La(1);
				if (_la==Id) {
					{
					State = 158; Match(Id);
					}
				}

				State = 161; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_usingDirective);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(Using);
			State = 166; Match(Namespace);
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 167;
					MatchWildcard();
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 173; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public FunctionDocBlockContext functionDocBlock() {
			return GetRuleContext<FunctionDocBlockContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_la = TokenStream.La(1);
			if (_la==DocBlockStart) {
				{
				State = 175; functionDocBlock();
				}
			}

			State = 180;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 178; Match(Template);
				State = 179; templateParamsBlock();
				}
			}

			State = 182; type();
			State = 183; bracesBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseClauseContext : ParserRuleContext {
		public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		public BaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterBaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitBaseClause(this);
		}
	}

	[RuleVersion(0)]
	public BaseClauseContext baseClause() {
		BaseClauseContext _localctx = new BaseClauseContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(Colon);
			State = 186; typeSpecifier();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 187; Match(Comma);
				State = 188; typeSpecifier();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDefinitionContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public ParensBlockContext parensBlock() {
			return GetRuleContext<ParensBlockContext>(0);
		}
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public TemplateParamsBlockContext templateParamsBlock() {
			return GetRuleContext<TemplateParamsBlockContext>(0);
		}
		public MemberInitializerListContext memberInitializerList() {
			return GetRuleContext<MemberInitializerListContext>(0);
		}
		public ConstructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterConstructorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitConstructorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDefinitionContext constructorDefinition() {
		ConstructorDefinitionContext _localctx = new ConstructorDefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_constructorDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 194; Match(Template);
				State = 195; templateParamsBlock();
				}
			}

			State = 198; typeSpecifier();
			State = 199; Match(Scope);
			State = 200; Match(Id);
			State = 201; parensBlock();
			State = 203;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 202; memberInitializerList();
				}
			}

			State = 205; bracesBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorDefinitionContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public ParensBlockContext parensBlock() {
			return GetRuleContext<ParensBlockContext>(0);
		}
		public BracesBlockContext bracesBlock() {
			return GetRuleContext<BracesBlockContext>(0);
		}
		public DestructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterDestructorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitDestructorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DestructorDefinitionContext destructorDefinition() {
		DestructorDefinitionContext _localctx = new DestructorDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_destructorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; typeSpecifier();
			State = 208; Match(Scope);
			State = 209; Match(Tilde);
			State = 210; Match(Id);
			State = 211; parensBlock();
			State = 212; bracesBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberInitializerListContext : ParserRuleContext {
		public MemberInitializerContext[] memberInitializer() {
			return GetRuleContexts<MemberInitializerContext>();
		}
		public MemberInitializerContext memberInitializer(int i) {
			return GetRuleContext<MemberInitializerContext>(i);
		}
		public MemberInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberInitializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterMemberInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitMemberInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public MemberInitializerListContext memberInitializerList() {
		MemberInitializerListContext _localctx = new MemberInitializerListContext(Context, State);
		EnterRule(_localctx, 18, RULE_memberInitializerList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(Colon);
			State = 215; memberInitializer();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 216; Match(Comma);
				State = 217; memberInitializer();
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberInitializerContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MemberInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterMemberInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitMemberInitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberInitializerContext memberInitializer() {
		MemberInitializerContext _localctx = new MemberInitializerContext(Context, State);
		EnterRule(_localctx, 20, RULE_memberInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 223; Match(Id);
				}
				break;
			case 2:
				{
				State = 224; typeSpecifier();
				}
				break;
			}
			State = 227; Match(LeftParen);
			State = 236;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0)) {
				{
				State = 228; expression();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 229; Match(Comma);
					State = 230; expression();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 238; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
	 
		public DeclaratorContext() { }
		public virtual void CopyFrom(DeclaratorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PointerDeclaratorContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public PointerDeclaratorContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterPointerDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitPointerDeclarator(this);
		}
	}
	public partial class ReferenceDeclaratorContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ReferenceDeclaratorContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterReferenceDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitReferenceDeclarator(this);
		}
	}
	public partial class NameDeclaratorContext : DeclaratorContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public NameDeclaratorContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterNameDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitNameDeclarator(this);
		}
	}
	public partial class ArrayDeclaratorContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public BracketsBlockContext bracketsBlock() {
			return GetRuleContext<BracketsBlockContext>(0);
		}
		public ArrayDeclaratorContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterArrayDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitArrayDeclarator(this);
		}
	}
	public partial class DeclaratorGroupContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public DeclaratorGroupContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterDeclaratorGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitDeclaratorGroup(this);
		}
	}
	public partial class FunctionDeclaratorContext : DeclaratorContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ParensBlockContext parensBlock() {
			return GetRuleContext<ParensBlockContext>(0);
		}
		public TemplateArgsBlockContext templateArgsBlock() {
			return GetRuleContext<TemplateArgsBlockContext>(0);
		}
		public FunctionDeclaratorContext(DeclaratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		return declarator(0);
	}

	private DeclaratorContext declarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclaratorContext _localctx = new DeclaratorContext(Context, _parentState);
		DeclaratorContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_declarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				_localctx = new PointerDeclaratorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 241; Match(Star);
				State = 242; declarator(3);
				}
				break;
			case 2:
				{
				_localctx = new ReferenceDeclaratorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 243; Match(And);
				State = 244; declarator(2);
				}
				break;
			case 3:
				{
				_localctx = new DeclaratorGroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245; Match(LeftParen);
				State = 246; declarator(0);
				State = 247; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new NameDeclaratorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 252;
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 249; typeSpecifier();
					State = 250; Match(Scope);
					}
					break;
				}
				State = 255;
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 254; Match(Id);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 268;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 266;
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new ArrayDeclaratorContext(new DeclaratorContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_declarator);
						State = 259;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 260; bracketsBlock();
						}
						break;
					case 2:
						{
						_localctx = new FunctionDeclaratorContext(new DeclaratorContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_declarator);
						State = 261;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 263;
						_la = TokenStream.La(1);
						if (_la==Less) {
							{
							State = 262; templateArgsBlock();
							}
						}

						State = 265; parensBlock();
						}
						break;
					}
					} 
				}
				State = 270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; typeSpecifier();
			State = 272; declarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public TemplateArgsBlockContext templateArgsBlock() {
			return GetRuleContext<TemplateArgsBlockContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(CppParser.IntType, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeSpecifier);
		try {
			State = 282;
			switch (TokenStream.La(1)) {
			case Scope:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 275;
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 274; nestedNameSpecifier();
					}
					break;
				}
				State = 277; Match(Id);
				State = 279;
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 278; templateArgsBlock();
					}
					break;
				}
				}
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; Match(IntType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamsBlockContext : ParserRuleContext {
		public TemplateParamContext[] templateParam() {
			return GetRuleContexts<TemplateParamContext>();
		}
		public TemplateParamContext templateParam(int i) {
			return GetRuleContext<TemplateParamContext>(i);
		}
		public TemplateParamsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParamsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTemplateParamsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTemplateParamsBlock(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamsBlockContext templateParamsBlock() {
		TemplateParamsBlockContext _localctx = new TemplateParamsBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_templateParamsBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(Less);
			State = 293;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << Class) | (1L << TypeName) | (1L << IntType))) != 0) || _la==Id) {
				{
				State = 285; templateParam();
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 286; Match(Comma);
					State = 287; templateParam();
					}
					}
					State = 292;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 295; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParamContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Id() { return GetToken(CppParser.Id, 0); }
		public ExpressionWithoutAngleBracketsContext expressionWithoutAngleBrackets() {
			return GetRuleContext<ExpressionWithoutAngleBracketsContext>(0);
		}
		public TemplateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTemplateParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTemplateParam(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParamContext templateParam() {
		TemplateParamContext _localctx = new TemplateParamContext(Context, State);
		EnterRule(_localctx, 30, RULE_templateParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			switch (TokenStream.La(1)) {
			case Scope:
			case IntType:
			case Id:
				{
				State = 297; type();
				}
				break;
			case TypeName:
				{
				State = 298; Match(TypeName);
				}
				break;
			case Class:
				{
				State = 299; Match(Class);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 303;
			_la = TokenStream.La(1);
			if (_la==Id) {
				{
				State = 302; Match(Id);
				}
			}

			State = 310;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 305; Match(Assign);
				State = 308;
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 306; type();
					}
					break;
				case 2:
					{
					State = 307; expressionWithoutAngleBrackets();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgsBlockContext : ParserRuleContext {
		public TemplateArgContext[] templateArg() {
			return GetRuleContexts<TemplateArgContext>();
		}
		public TemplateArgContext templateArg(int i) {
			return GetRuleContext<TemplateArgContext>(i);
		}
		public TemplateArgsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTemplateArgsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTemplateArgsBlock(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgsBlockContext templateArgsBlock() {
		TemplateArgsBlockContext _localctx = new TemplateArgsBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_templateArgsBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(Less);
			State = 321;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << LessEqual) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0)) {
				{
				State = 313; templateArg();
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 314; Match(Comma);
					State = 315; templateArg();
					}
					}
					State = 320;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 323; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionWithoutAngleBracketsContext expressionWithoutAngleBrackets() {
			return GetRuleContext<ExpressionWithoutAngleBracketsContext>(0);
		}
		public TemplateArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTemplateArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTemplateArg(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgContext templateArg() {
		TemplateArgContext _localctx = new TemplateArgContext(Context, State);
		EnterRule(_localctx, 34, RULE_templateArg);
		try {
			State = 327;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326; expressionWithoutAngleBrackets();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedNameSpecifierContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(CppParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(CppParser.Id, i);
		}
		public TemplateArgsBlockContext[] templateArgsBlock() {
			return GetRuleContexts<TemplateArgsBlockContext>();
		}
		public TemplateArgsBlockContext templateArgsBlock(int i) {
			return GetRuleContext<TemplateArgsBlockContext>(i);
		}
		public NestedNameSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedNameSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterNestedNameSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitNestedNameSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public NestedNameSpecifierContext nestedNameSpecifier() {
		NestedNameSpecifierContext _localctx = new NestedNameSpecifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_nestedNameSpecifier);
		int _la;
		try {
			int _alt;
			State = 339;
			switch (TokenStream.La(1)) {
			case Scope:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; Match(Scope);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 330; Match(Id);
						State = 332;
						_la = TokenStream.La(1);
						if (_la==Less) {
							{
							State = 331; templateArgsBlock();
							}
						}

						State = 334; Match(Scope);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 337;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracesBlockContext : ParserRuleContext {
		public BlockContentContext blockContent() {
			return GetRuleContext<BlockContentContext>(0);
		}
		public BracesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterBracesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitBracesBlock(this);
		}
	}

	[RuleVersion(0)]
	public BracesBlockContext bracesBlock() {
		BracesBlockContext _localctx = new BracesBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_bracesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(LeftBrace);
			State = 342; blockContent();
			State = 343; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketsBlockContext : ParserRuleContext {
		public BlockContentContext blockContent() {
			return GetRuleContext<BlockContentContext>(0);
		}
		public BracketsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketsBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterBracketsBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitBracketsBlock(this);
		}
	}

	[RuleVersion(0)]
	public BracketsBlockContext bracketsBlock() {
		BracketsBlockContext _localctx = new BracketsBlockContext(Context, State);
		EnterRule(_localctx, 40, RULE_bracketsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(LeftBracket);
			State = 346; blockContent();
			State = 347; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParensBlockContext : ParserRuleContext {
		public BlockContentContext blockContent() {
			return GetRuleContext<BlockContentContext>(0);
		}
		public ParensBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parensBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterParensBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitParensBlock(this);
		}
	}

	[RuleVersion(0)]
	public ParensBlockContext parensBlock() {
		ParensBlockContext _localctx = new ParensBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_parensBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(LeftParen);
			State = 350; blockContent();
			State = 351; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContentContext : ParserRuleContext {
		public BracesBlockContext[] bracesBlock() {
			return GetRuleContexts<BracesBlockContext>();
		}
		public BracesBlockContext bracesBlock(int i) {
			return GetRuleContext<BracesBlockContext>(i);
		}
		public BracketsBlockContext[] bracketsBlock() {
			return GetRuleContexts<BracketsBlockContext>();
		}
		public BracketsBlockContext bracketsBlock(int i) {
			return GetRuleContext<BracketsBlockContext>(i);
		}
		public ParensBlockContext[] parensBlock() {
			return GetRuleContexts<ParensBlockContext>();
		}
		public ParensBlockContext parensBlock(int i) {
			return GetRuleContext<ParensBlockContext>(i);
		}
		public BlockContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterBlockContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitBlockContent(this);
		}
	}

	[RuleVersion(0)]
	public BlockContentContext blockContent() {
		BlockContentContext _localctx = new BlockContentContext(Context, State);
		EnterRule(_localctx, 44, RULE_blockContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Semi) | (1L << Comma) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0)) {
				{
				State = 357;
				switch (TokenStream.La(1)) {
				case Scope:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Semi:
				case Comma:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Class:
				case Struct:
				case Union:
				case Enum:
				case TypeDef:
				case Template:
				case TypeName:
				case Namespace:
				case Using:
				case IntLiteral:
				case FloatLiteral:
				case CharLiteral:
				case StringLiteral:
				case BoolLiteral:
				case IntType:
				case Modifier:
				case AccessSpecifier:
				case Preproc:
				case LineComment:
				case BlockCommentStart:
				case DocBlockStart:
				case Whitespace:
				case ObjectiveCDirective:
				case LinkageSpecification:
				case CommonMacro:
				case Id:
				case DocBlockEnd:
				case LuaNameTag:
				case TextTag:
				case ConstTag:
				case FlagTag:
				case AttributeTag:
				case InParamTag:
				case OptionalInParamTag:
				case OutParamTag:
				case OverloadTag:
				case UnknownTag:
				case DocWord:
				case DocWhitespace:
				case BlockCommentEnd:
					{
					State = 353;
					_la = TokenStream.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				case LeftBrace:
					{
					State = 354; bracesBlock();
					}
					break;
				case LeftBracket:
					{
					State = 355; bracketsBlock();
					}
					break;
				case LeftParen:
					{
					State = 356; parensBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public BracesBlockContext[] bracesBlock() {
			return GetRuleContexts<BracesBlockContext>();
		}
		public BracesBlockContext bracesBlock(int i) {
			return GetRuleContext<BracesBlockContext>(i);
		}
		public BracketsBlockContext[] bracketsBlock() {
			return GetRuleContexts<BracketsBlockContext>();
		}
		public BracketsBlockContext bracketsBlock(int i) {
			return GetRuleContext<BracketsBlockContext>(i);
		}
		public ParensBlockContext[] parensBlock() {
			return GetRuleContexts<ParensBlockContext>();
		}
		public ParensBlockContext parensBlock(int i) {
			return GetRuleContext<ParensBlockContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 366;
				switch (TokenStream.La(1)) {
				case LeftBrace:
					{
					State = 362; bracesBlock();
					}
					break;
				case LeftBracket:
					{
					State = 363; bracketsBlock();
					}
					break;
				case LeftParen:
					{
					State = 364; parensBlock();
					}
					break;
				case Scope:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Class:
				case Struct:
				case Union:
				case Enum:
				case TypeDef:
				case Template:
				case TypeName:
				case Namespace:
				case Using:
				case IntLiteral:
				case FloatLiteral:
				case CharLiteral:
				case StringLiteral:
				case BoolLiteral:
				case IntType:
				case Modifier:
				case AccessSpecifier:
				case Preproc:
				case LineComment:
				case BlockCommentStart:
				case DocBlockStart:
				case Whitespace:
				case ObjectiveCDirective:
				case LinkageSpecification:
				case CommonMacro:
				case Id:
				case DocBlockEnd:
				case LuaNameTag:
				case TextTag:
				case ConstTag:
				case FlagTag:
				case AttributeTag:
				case InParamTag:
				case OptionalInParamTag:
				case OutParamTag:
				case OverloadTag:
				case UnknownTag:
				case DocWord:
				case DocWhitespace:
				case BlockCommentEnd:
					{
					State = 365;
					_la = TokenStream.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Semi) | (1L << Comma))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithoutAngleBracketsContext : ParserRuleContext {
		public BracesBlockContext[] bracesBlock() {
			return GetRuleContexts<BracesBlockContext>();
		}
		public BracesBlockContext bracesBlock(int i) {
			return GetRuleContext<BracesBlockContext>(i);
		}
		public BracketsBlockContext[] bracketsBlock() {
			return GetRuleContexts<BracketsBlockContext>();
		}
		public BracketsBlockContext bracketsBlock(int i) {
			return GetRuleContext<BracketsBlockContext>(i);
		}
		public ParensBlockContext[] parensBlock() {
			return GetRuleContexts<ParensBlockContext>();
		}
		public ParensBlockContext parensBlock(int i) {
			return GetRuleContext<ParensBlockContext>(i);
		}
		public ExpressionWithoutAngleBracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithoutAngleBrackets; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterExpressionWithoutAngleBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitExpressionWithoutAngleBrackets(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithoutAngleBracketsContext expressionWithoutAngleBrackets() {
		ExpressionWithoutAngleBracketsContext _localctx = new ExpressionWithoutAngleBracketsContext(Context, State);
		EnterRule(_localctx, 48, RULE_expressionWithoutAngleBrackets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 374;
				switch (TokenStream.La(1)) {
				case LeftBrace:
					{
					State = 370; bracesBlock();
					}
					break;
				case LeftBracket:
					{
					State = 371; bracketsBlock();
					}
					break;
				case LeftParen:
					{
					State = 372; parensBlock();
					}
					break;
				case Scope:
				case LessEqual:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Class:
				case Struct:
				case Union:
				case Enum:
				case TypeDef:
				case Template:
				case TypeName:
				case Namespace:
				case Using:
				case IntLiteral:
				case FloatLiteral:
				case CharLiteral:
				case StringLiteral:
				case BoolLiteral:
				case IntType:
				case Modifier:
				case AccessSpecifier:
				case Preproc:
				case LineComment:
				case BlockCommentStart:
				case DocBlockStart:
				case Whitespace:
				case ObjectiveCDirective:
				case LinkageSpecification:
				case CommonMacro:
				case Id:
				case DocBlockEnd:
				case LuaNameTag:
				case TextTag:
				case ConstTag:
				case FlagTag:
				case AttributeTag:
				case InParamTag:
				case OptionalInParamTag:
				case OutParamTag:
				case OverloadTag:
				case UnknownTag:
				case DocWord:
				case DocWhitespace:
				case BlockCommentEnd:
					{
					State = 373;
					_la = TokenStream.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftParen) | (1L << RightParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Less) | (1L << Greater) | (1L << Semi) | (1L << Comma))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Scope) | (1L << LeftParen) | (1L << LeftBracket) | (1L << LeftBrace) | (1L << LessEqual) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Assign) | (1L << StarAssign) | (1L << DivAssign) | (1L << ModAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftAssign) | (1L << RightShiftAssign) | (1L << AndAssign) | (1L << XorAssign) | (1L << OrAssign) | (1L << Equal) | (1L << NotEqual) | (1L << Arrow) | (1L << Dot) | (1L << Ellipsis) | (1L << Class) | (1L << Struct) | (1L << Union) | (1L << Enum) | (1L << TypeDef) | (1L << Template) | (1L << TypeName) | (1L << Namespace) | (1L << Using) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << CharLiteral) | (1L << StringLiteral) | (1L << BoolLiteral) | (1L << IntType) | (1L << Modifier))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AccessSpecifier - 64)) | (1L << (Preproc - 64)) | (1L << (LineComment - 64)) | (1L << (BlockCommentStart - 64)) | (1L << (DocBlockStart - 64)) | (1L << (Whitespace - 64)) | (1L << (ObjectiveCDirective - 64)) | (1L << (LinkageSpecification - 64)) | (1L << (CommonMacro - 64)) | (1L << (Id - 64)) | (1L << (DocBlockEnd - 64)) | (1L << (LuaNameTag - 64)) | (1L << (TextTag - 64)) | (1L << (ConstTag - 64)) | (1L << (FlagTag - 64)) | (1L << (AttributeTag - 64)) | (1L << (InParamTag - 64)) | (1L << (OptionalInParamTag - 64)) | (1L << (OutParamTag - 64)) | (1L << (OverloadTag - 64)) | (1L << (UnknownTag - 64)) | (1L << (DocWord - 64)) | (1L << (DocWhitespace - 64)) | (1L << (BlockCommentEnd - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDocBlockContext : ParserRuleContext {
		public ITerminalNode DocBlockStart() { return GetToken(CppParser.DocBlockStart, 0); }
		public LuaNameTagLineContext luaNameTagLine() {
			return GetRuleContext<LuaNameTagLineContext>(0);
		}
		public ITerminalNode DocBlockEnd() { return GetToken(CppParser.DocBlockEnd, 0); }
		public TextTagLineContext textTagLine() {
			return GetRuleContext<TextTagLineContext>(0);
		}
		public ConstTagLineContext[] constTagLine() {
			return GetRuleContexts<ConstTagLineContext>();
		}
		public ConstTagLineContext constTagLine(int i) {
			return GetRuleContext<ConstTagLineContext>(i);
		}
		public FlagTagLineContext[] flagTagLine() {
			return GetRuleContexts<FlagTagLineContext>();
		}
		public FlagTagLineContext flagTagLine(int i) {
			return GetRuleContext<FlagTagLineContext>(i);
		}
		public AttributeTagLineContext[] attributeTagLine() {
			return GetRuleContexts<AttributeTagLineContext>();
		}
		public AttributeTagLineContext attributeTagLine(int i) {
			return GetRuleContext<AttributeTagLineContext>(i);
		}
		public ClassDocBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDocBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterClassDocBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitClassDocBlock(this);
		}
	}

	[RuleVersion(0)]
	public ClassDocBlockContext classDocBlock() {
		ClassDocBlockContext _localctx = new ClassDocBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_classDocBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(DocBlockStart);
			State = 379; luaNameTagLine();
			State = 381;
			_la = TokenStream.La(1);
			if (_la==TextTag) {
				{
				State = 380; textTagLine();
				}
			}

			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (ConstTag - 77)) | (1L << (FlagTag - 77)) | (1L << (AttributeTag - 77)))) != 0)) {
				{
				State = 386;
				switch (TokenStream.La(1)) {
				case ConstTag:
					{
					State = 383; constTagLine();
					}
					break;
				case FlagTag:
					{
					State = 384; flagTagLine();
					}
					break;
				case AttributeTag:
					{
					State = 385; attributeTagLine();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 391; Match(DocBlockEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDocBlockContext : ParserRuleContext {
		public ITerminalNode DocBlockStart() { return GetToken(CppParser.DocBlockStart, 0); }
		public LuaNameTagLineContext luaNameTagLine() {
			return GetRuleContext<LuaNameTagLineContext>(0);
		}
		public OverloadListContext overloadList() {
			return GetRuleContext<OverloadListContext>(0);
		}
		public ITerminalNode DocBlockEnd() { return GetToken(CppParser.DocBlockEnd, 0); }
		public TextTagLineContext textTagLine() {
			return GetRuleContext<TextTagLineContext>(0);
		}
		public FunctionDocBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDocBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFunctionDocBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFunctionDocBlock(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDocBlockContext functionDocBlock() {
		FunctionDocBlockContext _localctx = new FunctionDocBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionDocBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(DocBlockStart);
			State = 394; luaNameTagLine();
			State = 396;
			_la = TokenStream.La(1);
			if (_la==TextTag) {
				{
				State = 395; textTagLine();
				}
			}

			State = 398; overloadList();
			State = 399; Match(DocBlockEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LuaNameTagLineContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode LuaNameTag() { return GetToken(CppParser.LuaNameTag, 0); }
		public ITerminalNode DocWord() { return GetToken(CppParser.DocWord, 0); }
		public LuaNameTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_luaNameTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterLuaNameTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitLuaNameTagLine(this);
		}
	}

	[RuleVersion(0)]
	public LuaNameTagLineContext luaNameTagLine() {
		LuaNameTagLineContext _localctx = new LuaNameTagLineContext(Context, State);
		EnterRule(_localctx, 54, RULE_luaNameTagLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(LuaNameTag);
			State = 402; _localctx.name = Match(DocWord);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextTagLineContext : ParserRuleContext {
		public ITerminalNode TextTag() { return GetToken(CppParser.TextTag, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public TextTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterTextTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitTextTagLine(this);
		}
	}

	[RuleVersion(0)]
	public TextTagLineContext textTagLine() {
		TextTagLineContext _localctx = new TextTagLineContext(Context, State);
		EnterRule(_localctx, 56, RULE_textTagLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(TextTag);
			State = 405; description();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTagLineContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode ConstTag() { return GetToken(CppParser.ConstTag, 0); }
		public ITerminalNode DocWord() { return GetToken(CppParser.DocWord, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ConstTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterConstTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitConstTagLine(this);
		}
	}

	[RuleVersion(0)]
	public ConstTagLineContext constTagLine() {
		ConstTagLineContext _localctx = new ConstTagLineContext(Context, State);
		EnterRule(_localctx, 58, RULE_constTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(ConstTag);
			State = 408; _localctx.name = Match(DocWord);
			State = 410;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 409; description();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagTagLineContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode FlagTag() { return GetToken(CppParser.FlagTag, 0); }
		public ITerminalNode DocWord() { return GetToken(CppParser.DocWord, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public FlagTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flagTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterFlagTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitFlagTagLine(this);
		}
	}

	[RuleVersion(0)]
	public FlagTagLineContext flagTagLine() {
		FlagTagLineContext _localctx = new FlagTagLineContext(Context, State);
		EnterRule(_localctx, 60, RULE_flagTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(FlagTag);
			State = 413; _localctx.name = Match(DocWord);
			State = 415;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 414; description();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTagLineContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode AttributeTag() { return GetToken(CppParser.AttributeTag, 0); }
		public ITerminalNode DocWord() { return GetToken(CppParser.DocWord, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public AttributeTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterAttributeTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitAttributeTagLine(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTagLineContext attributeTagLine() {
		AttributeTagLineContext _localctx = new AttributeTagLineContext(Context, State);
		EnterRule(_localctx, 62, RULE_attributeTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(AttributeTag);
			State = 418; _localctx.name = Match(DocWord);
			State = 420;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 419; description();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadListContext : ParserRuleContext {
		public OverloadBlockContext[] overloadBlock() {
			return GetRuleContexts<OverloadBlockContext>();
		}
		public OverloadBlockContext overloadBlock(int i) {
			return GetRuleContext<OverloadBlockContext>(i);
		}
		public OverloadTagLineContext[] overloadTagLine() {
			return GetRuleContexts<OverloadTagLineContext>();
		}
		public OverloadTagLineContext overloadTagLine(int i) {
			return GetRuleContext<OverloadTagLineContext>(i);
		}
		public OverloadListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOverloadList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOverloadList(this);
		}
	}

	[RuleVersion(0)]
	public OverloadListContext overloadList() {
		OverloadListContext _localctx = new OverloadListContext(Context, State);
		EnterRule(_localctx, 64, RULE_overloadList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 422; overloadTagLine();
				}
				break;
			}
			State = 425; overloadBlock();
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OverloadTag) {
				{
				{
				State = 426; overloadTagLine();
				State = 427; overloadBlock();
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadTagLineContext : ParserRuleContext {
		public ITerminalNode OverloadTag() { return GetToken(CppParser.OverloadTag, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public OverloadTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOverloadTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOverloadTagLine(this);
		}
	}

	[RuleVersion(0)]
	public OverloadTagLineContext overloadTagLine() {
		OverloadTagLineContext _localctx = new OverloadTagLineContext(Context, State);
		EnterRule(_localctx, 66, RULE_overloadTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(OverloadTag);
			State = 436;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 435; description();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadBlockContext : ParserRuleContext {
		public InParamTagLineContext[] inParamTagLine() {
			return GetRuleContexts<InParamTagLineContext>();
		}
		public InParamTagLineContext inParamTagLine(int i) {
			return GetRuleContext<InParamTagLineContext>(i);
		}
		public OptionalInParamTagLineContext[] optionalInParamTagLine() {
			return GetRuleContexts<OptionalInParamTagLineContext>();
		}
		public OptionalInParamTagLineContext optionalInParamTagLine(int i) {
			return GetRuleContext<OptionalInParamTagLineContext>(i);
		}
		public OutParamTagLineContext[] outParamTagLine() {
			return GetRuleContexts<OutParamTagLineContext>();
		}
		public OutParamTagLineContext outParamTagLine(int i) {
			return GetRuleContext<OutParamTagLineContext>(i);
		}
		public OverloadBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOverloadBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOverloadBlock(this);
		}
	}

	[RuleVersion(0)]
	public OverloadBlockContext overloadBlock() {
		OverloadBlockContext _localctx = new OverloadBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_overloadBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==InParamTag) {
				{
				{
				State = 438; inParamTagLine();
				}
				}
				State = 443;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OptionalInParamTag) {
				{
				{
				State = 444; optionalInParamTagLine();
				}
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OutParamTag) {
				{
				{
				State = 450; outParamTagLine();
				}
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InParamTagLineContext : ParserRuleContext {
		public IToken paramType;
		public IToken name;
		public ITerminalNode InParamTag() { return GetToken(CppParser.InParamTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public InParamTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inParamTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterInParamTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitInParamTagLine(this);
		}
	}

	[RuleVersion(0)]
	public InParamTagLineContext inParamTagLine() {
		InParamTagLineContext _localctx = new InParamTagLineContext(Context, State);
		EnterRule(_localctx, 70, RULE_inParamTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; Match(InParamTag);
			State = 457; _localctx.paramType = Match(DocWord);
			State = 462;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 458; _localctx.name = Match(DocWord);
				State = 460;
				_la = TokenStream.La(1);
				if (_la==DocWord) {
					{
					State = 459; description();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalInParamTagLineContext : ParserRuleContext {
		public IToken paramType;
		public IToken name;
		public ITerminalNode OptionalInParamTag() { return GetToken(CppParser.OptionalInParamTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public OptionalInParamTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalInParamTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOptionalInParamTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOptionalInParamTagLine(this);
		}
	}

	[RuleVersion(0)]
	public OptionalInParamTagLineContext optionalInParamTagLine() {
		OptionalInParamTagLineContext _localctx = new OptionalInParamTagLineContext(Context, State);
		EnterRule(_localctx, 72, RULE_optionalInParamTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; Match(OptionalInParamTag);
			State = 465; _localctx.paramType = Match(DocWord);
			State = 470;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 466; _localctx.name = Match(DocWord);
				State = 468;
				_la = TokenStream.La(1);
				if (_la==DocWord) {
					{
					State = 467; description();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutParamTagLineContext : ParserRuleContext {
		public IToken paramType;
		public IToken name;
		public ITerminalNode OutParamTag() { return GetToken(CppParser.OutParamTag, 0); }
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public OutParamTagLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outParamTagLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterOutParamTagLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitOutParamTagLine(this);
		}
	}

	[RuleVersion(0)]
	public OutParamTagLineContext outParamTagLine() {
		OutParamTagLineContext _localctx = new OutParamTagLineContext(Context, State);
		EnterRule(_localctx, 74, RULE_outParamTagLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(OutParamTag);
			State = 473; _localctx.paramType = Match(DocWord);
			State = 478;
			_la = TokenStream.La(1);
			if (_la==DocWord) {
				{
				State = 474; _localctx.name = Match(DocWord);
				State = 476;
				_la = TokenStream.La(1);
				if (_la==DocWord) {
					{
					State = 475; description();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public ITerminalNode[] DocWord() { return GetTokens(CppParser.DocWord); }
		public ITerminalNode DocWord(int i) {
			return GetToken(CppParser.DocWord, i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICppParserListener typedListener = listener as ICppParserListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 76, RULE_description);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 480; Match(DocWord);
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==DocWord );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return declarator_sempred((DeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool declarator_sempred(DeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3Y\x1E8\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x3\x2\a\x2R\n"+
		"\x2\f\x2\xE\x2U\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\a\x3\x61\n\x3\f\x3\xE\x3\x64\v\x3\x3\x3\x3\x3\x3\x3\x5\x3i\n"+
		"\x3\x3\x3\x3\x3\a\x3m\n\x3\f\x3\xE\x3p\v\x3\x3\x3\x3\x3\x5\x3t\n\x3\x3"+
		"\x4\x3\x4\x5\x4x\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x7F\n\x4\x3"+
		"\x4\x3\x4\x3\x4\x5\x4\x84\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5\x8A\n\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x90\n\x5\x3\x5\x5\x5\x93\n\x5\x3\x5\x3"+
		"\x5\x5\x5\x97\n\x5\x3\x5\x3\x5\x3\x5\x5\x5\x9C\n\x5\x5\x5\x9E\n\x5\x3"+
		"\x5\x3\x5\x5\x5\xA2\n\x5\x3\x5\x3\x5\x5\x5\xA6\n\x5\x3\x6\x3\x6\x3\x6"+
		"\a\x6\xAB\n\x6\f\x6\xE\x6\xAE\v\x6\x3\x6\x3\x6\x3\a\x5\a\xB3\n\a\x3\a"+
		"\x3\a\x5\a\xB7\n\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\a\b\xC0\n\b\f\b"+
		"\xE\b\xC3\v\b\x3\t\x3\t\x5\t\xC7\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xCE"+
		"\n\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v"+
		"\a\v\xDD\n\v\f\v\xE\v\xE0\v\v\x3\f\x3\f\x5\f\xE4\n\f\x3\f\x3\f\x3\f\x3"+
		"\f\a\f\xEA\n\f\f\f\xE\f\xED\v\f\x5\f\xEF\n\f\x3\f\x3\f\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xFF\n\r\x3\r\x5\r\x102"+
		"\n\r\x5\r\x104\n\r\x3\r\x3\r\x3\r\x3\r\x5\r\x10A\n\r\x3\r\a\r\x10D\n\r"+
		"\f\r\xE\r\x110\v\r\x3\xE\x3\xE\x3\xE\x3\xF\x5\xF\x116\n\xF\x3\xF\x3\xF"+
		"\x5\xF\x11A\n\xF\x3\xF\x5\xF\x11D\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10"+
		"\x123\n\x10\f\x10\xE\x10\x126\v\x10\x5\x10\x128\n\x10\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\x12F\n\x11\x3\x11\x5\x11\x132\n\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\x137\n\x11\x5\x11\x139\n\x11\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\a\x12\x13F\n\x12\f\x12\xE\x12\x142\v\x12\x5\x12\x144\n\x12\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x5\x13\x14A\n\x13\x3\x14\x3\x14\x3\x14\x5\x14\x14F"+
		"\n\x14\x3\x14\x6\x14\x152\n\x14\r\x14\xE\x14\x153\x5\x14\x156\n\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x168\n\x18\f\x18\xE\x18"+
		"\x16B\v\x18\x3\x19\x3\x19\x3\x19\x3\x19\x6\x19\x171\n\x19\r\x19\xE\x19"+
		"\x172\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x6\x1A\x179\n\x1A\r\x1A\xE\x1A\x17A"+
		"\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x180\n\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x185"+
		"\n\x1B\f\x1B\xE\x1B\x188\v\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C"+
		"\x18F\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x19D\n\x1F\x3 \x3 \x3 \x5 \x1A2\n \x3"+
		"!\x3!\x3!\x5!\x1A7\n!\x3\"\x5\"\x1AA\n\"\x3\"\x3\"\x3\"\x3\"\a\"\x1B0"+
		"\n\"\f\"\xE\"\x1B3\v\"\x3#\x3#\x5#\x1B7\n#\x3$\a$\x1BA\n$\f$\xE$\x1BD"+
		"\v$\x3$\a$\x1C0\n$\f$\xE$\x1C3\v$\x3$\a$\x1C6\n$\f$\xE$\x1C9\v$\x3%\x3"+
		"%\x3%\x3%\x5%\x1CF\n%\x5%\x1D1\n%\x3&\x3&\x3&\x3&\x5&\x1D7\n&\x5&\x1D9"+
		"\n&\x3\'\x3\'\x3\'\x3\'\x5\'\x1DF\n\'\x5\'\x1E1\n\'\x3(\x6(\x1E4\n(\r"+
		"(\xE(\x1E5\x3(\x3\xAC\x3\x18)\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A"+
		"\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLN\x2\x6\x3\x2"+
		"\x32\x35\x3\x2\x4\t\x4\x2\x4\t !\x5\x2\x4\n\f\f !\x21D\x2S\x3\x2\x2\x2"+
		"\x4s\x3\x2\x2\x2\x6w\x3\x2\x2\x2\b\xA5\x3\x2\x2\x2\n\xA7\x3\x2\x2\x2\f"+
		"\xB2\x3\x2\x2\x2\xE\xBB\x3\x2\x2\x2\x10\xC6\x3\x2\x2\x2\x12\xD1\x3\x2"+
		"\x2\x2\x14\xD8\x3\x2\x2\x2\x16\xE3\x3\x2\x2\x2\x18\x103\x3\x2\x2\x2\x1A"+
		"\x111\x3\x2\x2\x2\x1C\x11C\x3\x2\x2\x2\x1E\x11E\x3\x2\x2\x2 \x12E\x3\x2"+
		"\x2\x2\"\x13A\x3\x2\x2\x2$\x149\x3\x2\x2\x2&\x155\x3\x2\x2\x2(\x157\x3"+
		"\x2\x2\x2*\x15B\x3\x2\x2\x2,\x15F\x3\x2\x2\x2.\x169\x3\x2\x2\x2\x30\x170"+
		"\x3\x2\x2\x2\x32\x178\x3\x2\x2\x2\x34\x17C\x3\x2\x2\x2\x36\x18B\x3\x2"+
		"\x2\x2\x38\x193\x3\x2\x2\x2:\x196\x3\x2\x2\x2<\x199\x3\x2\x2\x2>\x19E"+
		"\x3\x2\x2\x2@\x1A3\x3\x2\x2\x2\x42\x1A9\x3\x2\x2\x2\x44\x1B4\x3\x2\x2"+
		"\x2\x46\x1BB\x3\x2\x2\x2H\x1CA\x3\x2\x2\x2J\x1D2\x3\x2\x2\x2L\x1DA\x3"+
		"\x2\x2\x2N\x1E3\x3\x2\x2\x2PR\x5\x4\x3\x2QP\x3\x2\x2\x2RU\x3\x2\x2\x2"+
		"SQ\x3\x2\x2\x2ST\x3\x2\x2\x2TV\x3\x2\x2\x2US\x3\x2\x2\x2VW\a\x2\x2\x3"+
		"W\x3\x3\x2\x2\x2Xt\x5\x6\x4\x2Yt\x5\n\x6\x2Zt\x5\b\x5\x2[t\x5\f\a\x2\\"+
		"t\x5\x10\t\x2]t\x5\x12\n\x2^\x62\a\b\x2\x2_\x61\x5\x4\x3\x2`_\x3\x2\x2"+
		"\x2\x61\x64\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x65\x3"+
		"\x2\x2\x2\x64\x62\x3\x2\x2\x2\x65t\a\t\x2\x2\x66h\a\x39\x2\x2gi\aK\x2"+
		"\x2hg\x3\x2\x2\x2hi\x3\x2\x2\x2ij\x3\x2\x2\x2jn\a\b\x2\x2km\x5\x4\x3\x2"+
		"lk\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2oq\x3\x2\x2\x2"+
		"pn\x3\x2\x2\x2qt\a\t\x2\x2rt\a \x2\x2sX\x3\x2\x2\x2sY\x3\x2\x2\x2sZ\x3"+
		"\x2\x2\x2s[\x3\x2\x2\x2s\\\x3\x2\x2\x2s]\x3\x2\x2\x2s^\x3\x2\x2\x2s\x66"+
		"\x3\x2\x2\x2sr\x3\x2\x2\x2t\x5\x3\x2\x2\x2uv\a\x37\x2\x2vx\x5\x1E\x10"+
		"\x2wu\x3\x2\x2\x2wx\x3\x2\x2\x2x~\x3\x2\x2\x2y\x7F\x5\x1C\xF\x2z\x7F\a"+
		"\x32\x2\x2{\x7F\a\x33\x2\x2|\x7F\a\x34\x2\x2}\x7F\a\x35\x2\x2~y\x3\x2"+
		"\x2\x2~z\x3\x2\x2\x2~{\x3\x2\x2\x2~|\x3\x2\x2\x2~}\x3\x2\x2\x2\x7F\x80"+
		"\x3\x2\x2\x2\x80\x83\x5\x18\r\x2\x81\x82\a\"\x2\x2\x82\x84\x5\x30\x19"+
		"\x2\x83\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86"+
		"\a \x2\x2\x86\a\x3\x2\x2\x2\x87\x89\a\x36\x2\x2\x88\x8A\t\x2\x2\x2\x89"+
		"\x88\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\x5\x1A"+
		"\xE\x2\x8C\x8D\a \x2\x2\x8D\xA6\x3\x2\x2\x2\x8E\x90\x5\x34\x1B\x2\x8F"+
		"\x8E\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x92\x3\x2\x2\x2\x91\x93\a\x36"+
		"\x2\x2\x92\x91\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94"+
		"\x95\a\x37\x2\x2\x95\x97\x5\x1E\x10\x2\x96\x94\x3\x2\x2\x2\x96\x97\x3"+
		"\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x9D\t\x2\x2\x2\x99\x9B\x5\x1C\xF\x2"+
		"\x9A\x9C\x5\xE\b\x2\x9B\x9A\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9E\x3"+
		"\x2\x2\x2\x9D\x99\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2"+
		"\x9F\xA1\x5(\x15\x2\xA0\xA2\aK\x2\x2\xA1\xA0\x3\x2\x2\x2\xA1\xA2\x3\x2"+
		"\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA4\a \x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\x87"+
		"\x3\x2\x2\x2\xA5\x8F\x3\x2\x2\x2\xA6\t\x3\x2\x2\x2\xA7\xA8\a:\x2\x2\xA8"+
		"\xAC\a\x39\x2\x2\xA9\xAB\v\x2\x2\x2\xAA\xA9\x3\x2\x2\x2\xAB\xAE\x3\x2"+
		"\x2\x2\xAC\xAD\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAF\x3\x2\x2\x2\xAE"+
		"\xAC\x3\x2\x2\x2\xAF\xB0\a \x2\x2\xB0\v\x3\x2\x2\x2\xB1\xB3\x5\x36\x1C"+
		"\x2\xB2\xB1\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB5"+
		"\a\x37\x2\x2\xB5\xB7\x5\x1E\x10\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2"+
		"\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\x5\x1A\xE\x2\xB9\xBA\x5(\x15\x2\xBA\r"+
		"\x3\x2\x2\x2\xBB\xBC\a\x1F\x2\x2\xBC\xC1\x5\x1C\xF\x2\xBD\xBE\a!\x2\x2"+
		"\xBE\xC0\x5\x1C\xF\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC3\x3\x2\x2\x2\xC1\xBF"+
		"\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xF\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2"+
		"\xC4\xC5\a\x37\x2\x2\xC5\xC7\x5\x1E\x10\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7"+
		"\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\x5\x1C\xF\x2\xC9\xCA\a\x3\x2"+
		"\x2\xCA\xCB\aK\x2\x2\xCB\xCD\x5,\x17\x2\xCC\xCE\x5\x14\v\x2\xCD\xCC\x3"+
		"\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD0\x5(\x15\x2\xD0"+
		"\x11\x3\x2\x2\x2\xD1\xD2\x5\x1C\xF\x2\xD2\xD3\a\x3\x2\x2\xD3\xD4\a\x1D"+
		"\x2\x2\xD4\xD5\aK\x2\x2\xD5\xD6\x5,\x17\x2\xD6\xD7\x5(\x15\x2\xD7\x13"+
		"\x3\x2\x2\x2\xD8\xD9\a\x1F\x2\x2\xD9\xDE\x5\x16\f\x2\xDA\xDB\a!\x2\x2"+
		"\xDB\xDD\x5\x16\f\x2\xDC\xDA\x3\x2\x2\x2\xDD\xE0\x3\x2\x2\x2\xDE\xDC\x3"+
		"\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\x15\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2"+
		"\xE1\xE4\aK\x2\x2\xE2\xE4\x5\x1C\xF\x2\xE3\xE1\x3\x2\x2\x2\xE3\xE2\x3"+
		"\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xEE\a\x4\x2\x2\xE6\xEB\x5\x30\x19\x2"+
		"\xE7\xE8\a!\x2\x2\xE8\xEA\x5\x30\x19\x2\xE9\xE7\x3\x2\x2\x2\xEA\xED\x3"+
		"\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2"+
		"\xED\xEB\x3\x2\x2\x2\xEE\xE6\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF0\x3"+
		"\x2\x2\x2\xF0\xF1\a\x5\x2\x2\xF1\x17\x3\x2\x2\x2\xF2\xF3\b\r\x1\x2\xF3"+
		"\xF4\a\x14\x2\x2\xF4\x104\x5\x18\r\x5\xF5\xF6\a\x17\x2\x2\xF6\x104\x5"+
		"\x18\r\x4\xF7\xF8\a\x4\x2\x2\xF8\xF9\x5\x18\r\x2\xF9\xFA\a\x5\x2\x2\xFA"+
		"\x104\x3\x2\x2\x2\xFB\xFC\x5\x1C\xF\x2\xFC\xFD\a\x3\x2\x2\xFD\xFF\x3\x2"+
		"\x2\x2\xFE\xFB\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x101\x3\x2\x2\x2\x100"+
		"\x102\aK\x2\x2\x101\x100\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x104\x3"+
		"\x2\x2\x2\x103\xF2\x3\x2\x2\x2\x103\xF5\x3\x2\x2\x2\x103\xF7\x3\x2\x2"+
		"\x2\x103\xFE\x3\x2\x2\x2\x104\x10E\x3\x2\x2\x2\x105\x106\f\a\x2\x2\x106"+
		"\x10D\x5*\x16\x2\x107\x109\f\x6\x2\x2\x108\x10A\x5\"\x12\x2\x109\x108"+
		"\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10D\x5"+
		",\x17\x2\x10C\x105\x3\x2\x2\x2\x10C\x107\x3\x2\x2\x2\x10D\x110\x3\x2\x2"+
		"\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x19\x3\x2\x2\x2\x110"+
		"\x10E\x3\x2\x2\x2\x111\x112\x5\x1C\xF\x2\x112\x113\x5\x18\r\x2\x113\x1B"+
		"\x3\x2\x2\x2\x114\x116\x5&\x14\x2\x115\x114\x3\x2\x2\x2\x115\x116\x3\x2"+
		"\x2\x2\x116\x117\x3\x2\x2\x2\x117\x119\aK\x2\x2\x118\x11A\x5\"\x12\x2"+
		"\x119\x118\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11D\x3\x2\x2\x2\x11B"+
		"\x11D\a@\x2\x2\x11C\x115\x3\x2\x2\x2\x11C\x11B\x3\x2\x2\x2\x11D\x1D\x3"+
		"\x2\x2\x2\x11E\x127\a\n\x2\x2\x11F\x124\x5 \x11\x2\x120\x121\a!\x2\x2"+
		"\x121\x123\x5 \x11\x2\x122\x120\x3\x2\x2\x2\x123\x126\x3\x2\x2\x2\x124"+
		"\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x128\x3\x2\x2\x2\x126\x124"+
		"\x3\x2\x2\x2\x127\x11F\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x129\x3"+
		"\x2\x2\x2\x129\x12A\a\f\x2\x2\x12A\x1F\x3\x2\x2\x2\x12B\x12F\x5\x1A\xE"+
		"\x2\x12C\x12F\a\x38\x2\x2\x12D\x12F\a\x32\x2\x2\x12E\x12B\x3\x2\x2\x2"+
		"\x12E\x12C\x3\x2\x2\x2\x12E\x12D\x3\x2\x2\x2\x12F\x131\x3\x2\x2\x2\x130"+
		"\x132\aK\x2\x2\x131\x130\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x138\x3"+
		"\x2\x2\x2\x133\x136\a\"\x2\x2\x134\x137\x5\x1A\xE\x2\x135\x137\x5\x32"+
		"\x1A\x2\x136\x134\x3\x2\x2\x2\x136\x135\x3\x2\x2\x2\x137\x139\x3\x2\x2"+
		"\x2\x138\x133\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139!\x3\x2\x2\x2\x13A"+
		"\x143\a\n\x2\x2\x13B\x140\x5$\x13\x2\x13C\x13D\a!\x2\x2\x13D\x13F\x5$"+
		"\x13\x2\x13E\x13C\x3\x2\x2\x2\x13F\x142\x3\x2\x2\x2\x140\x13E\x3\x2\x2"+
		"\x2\x140\x141\x3\x2\x2\x2\x141\x144\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2"+
		"\x143\x13B\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145"+
		"\x146\a\f\x2\x2\x146#\x3\x2\x2\x2\x147\x14A\x5\x1A\xE\x2\x148\x14A\x5"+
		"\x32\x1A\x2\x149\x147\x3\x2\x2\x2\x149\x148\x3\x2\x2\x2\x14A%\x3\x2\x2"+
		"\x2\x14B\x156\a\x3\x2\x2\x14C\x14E\aK\x2\x2\x14D\x14F\x5\"\x12\x2\x14E"+
		"\x14D\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x152"+
		"\a\x3\x2\x2\x151\x14C\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x151\x3\x2"+
		"\x2\x2\x153\x154\x3\x2\x2\x2\x154\x156\x3\x2\x2\x2\x155\x14B\x3\x2\x2"+
		"\x2\x155\x151\x3\x2\x2\x2\x156\'\x3\x2\x2\x2\x157\x158\a\b\x2\x2\x158"+
		"\x159\x5.\x18\x2\x159\x15A\a\t\x2\x2\x15A)\x3\x2\x2\x2\x15B\x15C\a\x6"+
		"\x2\x2\x15C\x15D\x5.\x18\x2\x15D\x15E\a\a\x2\x2\x15E+\x3\x2\x2\x2\x15F"+
		"\x160\a\x4\x2\x2\x160\x161\x5.\x18\x2\x161\x162\a\x5\x2\x2\x162-\x3\x2"+
		"\x2\x2\x163\x168\n\x3\x2\x2\x164\x168\x5(\x15\x2\x165\x168\x5*\x16\x2"+
		"\x166\x168\x5,\x17\x2\x167\x163\x3\x2\x2\x2\x167\x164\x3\x2\x2\x2\x167"+
		"\x165\x3\x2\x2\x2\x167\x166\x3\x2\x2\x2\x168\x16B\x3\x2\x2\x2\x169\x167"+
		"\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A/\x3\x2\x2\x2\x16B\x169\x3\x2\x2"+
		"\x2\x16C\x171\x5(\x15\x2\x16D\x171\x5*\x16\x2\x16E\x171\x5,\x17\x2\x16F"+
		"\x171\n\x4\x2\x2\x170\x16C\x3\x2\x2\x2\x170\x16D\x3\x2\x2\x2\x170\x16E"+
		"\x3\x2\x2\x2\x170\x16F\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172\x170\x3"+
		"\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x31\x3\x2\x2\x2\x174\x179\x5(\x15"+
		"\x2\x175\x179\x5*\x16\x2\x176\x179\x5,\x17\x2\x177\x179\n\x5\x2\x2\x178"+
		"\x174\x3\x2\x2\x2\x178\x175\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x178\x177"+
		"\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17A\x17B\x3"+
		"\x2\x2\x2\x17B\x33\x3\x2\x2\x2\x17C\x17D\a\x46\x2\x2\x17D\x17F\x5\x38"+
		"\x1D\x2\x17E\x180\x5:\x1E\x2\x17F\x17E\x3\x2\x2\x2\x17F\x180\x3\x2\x2"+
		"\x2\x180\x186\x3\x2\x2\x2\x181\x185\x5<\x1F\x2\x182\x185\x5> \x2\x183"+
		"\x185\x5@!\x2\x184\x181\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x184\x183\x3"+
		"\x2\x2\x2\x185\x188\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x186\x187\x3\x2"+
		"\x2\x2\x187\x189\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x189\x18A\aL\x2\x2"+
		"\x18A\x35\x3\x2\x2\x2\x18B\x18C\a\x46\x2\x2\x18C\x18E\x5\x38\x1D\x2\x18D"+
		"\x18F\x5:\x1E\x2\x18E\x18D\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x190"+
		"\x3\x2\x2\x2\x190\x191\x5\x42\"\x2\x191\x192\aL\x2\x2\x192\x37\x3\x2\x2"+
		"\x2\x193\x194\aM\x2\x2\x194\x195\aW\x2\x2\x195\x39\x3\x2\x2\x2\x196\x197"+
		"\aN\x2\x2\x197\x198\x5N(\x2\x198;\x3\x2\x2\x2\x199\x19A\aO\x2\x2\x19A"+
		"\x19C\aW\x2\x2\x19B\x19D\x5N(\x2\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3\x2"+
		"\x2\x2\x19D=\x3\x2\x2\x2\x19E\x19F\aP\x2\x2\x19F\x1A1\aW\x2\x2\x1A0\x1A2"+
		"\x5N(\x2\x1A1\x1A0\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2?\x3\x2\x2\x2"+
		"\x1A3\x1A4\aQ\x2\x2\x1A4\x1A6\aW\x2\x2\x1A5\x1A7\x5N(\x2\x1A6\x1A5\x3"+
		"\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x41\x3\x2\x2\x2\x1A8\x1AA\x5\x44"+
		"#\x2\x1A9\x1A8\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2"+
		"\x1AB\x1B1\x5\x46$\x2\x1AC\x1AD\x5\x44#\x2\x1AD\x1AE\x5\x46$\x2\x1AE\x1B0"+
		"\x3\x2\x2\x2\x1AF\x1AC\x3\x2\x2\x2\x1B0\x1B3\x3\x2\x2\x2\x1B1\x1AF\x3"+
		"\x2\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x43\x3\x2\x2\x2\x1B3\x1B1\x3\x2\x2"+
		"\x2\x1B4\x1B6\aU\x2\x2\x1B5\x1B7\x5N(\x2\x1B6\x1B5\x3\x2\x2\x2\x1B6\x1B7"+
		"\x3\x2\x2\x2\x1B7\x45\x3\x2\x2\x2\x1B8\x1BA\x5H%\x2\x1B9\x1B8\x3\x2\x2"+
		"\x2\x1BA\x1BD\x3\x2\x2\x2\x1BB\x1B9\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2"+
		"\x1BC\x1C1\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BE\x1C0\x5J&\x2\x1BF\x1BE"+
		"\x3\x2\x2\x2\x1C0\x1C3\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3"+
		"\x2\x2\x2\x1C2\x1C7\x3\x2\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C4\x1C6\x5L\'"+
		"\x2\x1C5\x1C4\x3\x2\x2\x2\x1C6\x1C9\x3\x2\x2\x2\x1C7\x1C5\x3\x2\x2\x2"+
		"\x1C7\x1C8\x3\x2\x2\x2\x1C8G\x3\x2\x2\x2\x1C9\x1C7\x3\x2\x2\x2\x1CA\x1CB"+
		"\aR\x2\x2\x1CB\x1D0\aW\x2\x2\x1CC\x1CE\aW\x2\x2\x1CD\x1CF\x5N(\x2\x1CE"+
		"\x1CD\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x1D1\x3\x2\x2\x2\x1D0\x1CC"+
		"\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1I\x3\x2\x2\x2\x1D2\x1D3\aS\x2\x2"+
		"\x1D3\x1D8\aW\x2\x2\x1D4\x1D6\aW\x2\x2\x1D5\x1D7\x5N(\x2\x1D6\x1D5\x3"+
		"\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D9\x3\x2\x2\x2\x1D8\x1D4\x3\x2"+
		"\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9K\x3\x2\x2\x2\x1DA\x1DB\aT\x2\x2\x1DB"+
		"\x1E0\aW\x2\x2\x1DC\x1DE\aW\x2\x2\x1DD\x1DF\x5N(\x2\x1DE\x1DD\x3\x2\x2"+
		"\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E1\x3\x2\x2\x2\x1E0\x1DC\x3\x2\x2\x2"+
		"\x1E0\x1E1\x3\x2\x2\x2\x1E1M\x3\x2\x2\x2\x1E2\x1E4\aW\x2\x2\x1E3\x1E2"+
		"\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E5\x1E6\x3"+
		"\x2\x2\x2\x1E6O\x3\x2\x2\x2KS\x62hnsw~\x83\x89\x8F\x92\x96\x9B\x9D\xA1"+
		"\xA5\xAC\xB2\xB6\xC1\xC6\xCD\xDE\xE3\xEB\xEE\xFE\x101\x103\x109\x10C\x10E"+
		"\x115\x119\x11C\x124\x127\x12E\x131\x136\x138\x140\x143\x149\x14E\x153"+
		"\x155\x167\x169\x170\x172\x178\x17A\x17F\x184\x186\x18E\x19C\x1A1\x1A6"+
		"\x1A9\x1B1\x1B6\x1BB\x1C1\x1C7\x1CE\x1D0\x1D6\x1D8\x1DE\x1E0\x1E5";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CppParser
