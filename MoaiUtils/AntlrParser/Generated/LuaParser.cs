//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lua.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace CppParser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class LuaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, NAME=50, NORMALSTRING=51, CHARSTRING=52, 
		LONGSTRING=53, INT=54, HEX=55, FLOAT=56, HEX_FLOAT=57, COMMENT=58, LINE_COMMENT=59, 
		WS=60, SHEBANG=61;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_retstat = 3, RULE_label = 4, 
		RULE_funcname = 5, RULE_varlist = 6, RULE_namelist = 7, RULE_explist = 8, 
		RULE_exp = 9, RULE_var = 10, RULE_prefixexp = 11, RULE_functioncall = 12, 
		RULE_varOrExp = 13, RULE_nameAndArgs = 14, RULE_varSuffix = 15, RULE_args = 16, 
		RULE_functiondef = 17, RULE_funcbody = 18, RULE_parlist = 19, RULE_tableconstructor = 20, 
		RULE_fieldlist = 21, RULE_field = 22, RULE_fieldsep = 23, RULE_operatorOr = 24, 
		RULE_operatorAnd = 25, RULE_operatorComparison = 26, RULE_operatorStrcat = 27, 
		RULE_operatorAddSub = 28, RULE_operatorMulDivMod = 29, RULE_operatorUnary = 30, 
		RULE_operatorPower = 31, RULE_number = 32, RULE_string = 33;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "retstat", "label", "funcname", "varlist", "namelist", 
		"explist", "exp", "var", "prefixexp", "functioncall", "varOrExp", "nameAndArgs", 
		"varSuffix", "args", "functiondef", "funcbody", "parlist", "tableconstructor", 
		"fieldlist", "field", "fieldsep", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorStrcat", "operatorAddSub", "operatorMulDivMod", "operatorUnary", 
		"operatorPower", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'goto'", "'do'", "'end'", "'while'", "'repeat'", 
		"'until'", "'if'", "'then'", "'elseif'", "'else'", "'for'", "','", "'in'", 
		"'function'", "'local'", "'return'", "'::'", "'.'", "':'", "'nil'", "'false'", 
		"'true'", "'...'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'or'", "'and'", 
		"'<'", "'>'", "'<='", "'>='", "'~='", "'=='", "'..'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'not'", "'#'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "NAME", "NORMALSTRING", "CHARSTRING", "LONGSTRING", "INT", 
		"HEX", "FLOAT", "HEX_FLOAT", "COMMENT", "LINE_COMMENT", "WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LuaParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; block();
			State = 69; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__9) | (1L << T__13) | (1L << T__16) | (1L << T__17) | (1L << T__19) | (1L << T__26) | (1L << NAME))) != 0)) {
				{
				{
				State = 71; stat();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 78;
			_la = TokenStream.La(1);
			if (_la==T__18) {
				{
				State = 77; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			State = 161;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; varlist();
				State = 82; Match(T__1);
				State = 83; explist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; functioncall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86; label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 87; Match(T__2);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 88; Match(T__3);
				State = 89; Match(NAME);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 90; Match(T__4);
				State = 91; block();
				State = 92; Match(T__5);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 94; Match(T__6);
				State = 95; exp(0);
				State = 96; Match(T__4);
				State = 97; block();
				State = 98; Match(T__5);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 100; Match(T__7);
				State = 101; block();
				State = 102; Match(T__8);
				State = 103; exp(0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 105; Match(T__9);
				State = 106; exp(0);
				State = 107; Match(T__10);
				State = 108; block();
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__11) {
					{
					{
					State = 109; Match(T__11);
					State = 110; exp(0);
					State = 111; Match(T__10);
					State = 112; block();
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 121;
				_la = TokenStream.La(1);
				if (_la==T__12) {
					{
					State = 119; Match(T__12);
					State = 120; block();
					}
				}

				State = 123; Match(T__5);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 125; Match(T__13);
				State = 126; Match(NAME);
				State = 127; Match(T__1);
				State = 128; exp(0);
				State = 129; Match(T__14);
				State = 130; exp(0);
				State = 133;
				_la = TokenStream.La(1);
				if (_la==T__14) {
					{
					State = 131; Match(T__14);
					State = 132; exp(0);
					}
				}

				State = 135; Match(T__4);
				State = 136; block();
				State = 137; Match(T__5);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 139; Match(T__13);
				State = 140; namelist();
				State = 141; Match(T__15);
				State = 142; explist();
				State = 143; Match(T__4);
				State = 144; block();
				State = 145; Match(T__5);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 147; Match(T__16);
				State = 148; funcname();
				State = 149; funcbody();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 151; Match(T__17);
				State = 152; Match(T__16);
				State = 153; Match(NAME);
				State = 154; funcbody();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 155; Match(T__17);
				State = 156; namelist();
				State = 159;
				_la = TokenStream.La(1);
				if (_la==T__1) {
					{
					State = 157; Match(T__1);
					State = 158; explist();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(Context, State);
		EnterRule(_localctx, 6, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(T__18);
			State = 165;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__30) | (1L << T__42) | (1L << T__46) | (1L << T__47) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 164; explist();
				}
			}

			State = 168;
			_la = TokenStream.La(1);
			if (_la==T__0) {
				{
				State = 167; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 8, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(T__19);
			State = 171; Match(NAME);
			State = 172; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(NAME);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__20) {
				{
				{
				State = 175; Match(T__20);
				State = 176; Match(NAME);
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 184;
			_la = TokenStream.La(1);
			if (_la==T__21) {
				{
				State = 182; Match(T__21);
				State = 183; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 12, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; var();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__14) {
				{
				{
				State = 187; Match(T__14);
				State = 188; var();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 14, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(NAME);
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 195; Match(T__14);
					State = 196; Match(NAME);
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 16, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; exp(0);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__14) {
				{
				{
				State = 203; Match(T__14);
				State = 204; exp(0);
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			switch (TokenStream.La(1)) {
			case T__42:
			case T__46:
			case T__47:
				{
				State = 211; operatorUnary();
				State = 212; exp(7);
				}
				break;
			case T__22:
				{
				State = 214; Match(T__22);
				}
				break;
			case T__23:
				{
				State = 215; Match(T__23);
				}
				break;
			case T__24:
				{
				State = 216; Match(T__24);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 217; number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 218; @string();
				}
				break;
			case T__25:
				{
				State = 219; Match(T__25);
				}
				break;
			case T__16:
				{
				State = 220; functiondef();
				}
				break;
			case T__26:
			case NAME:
				{
				State = 221; prefixexp();
				}
				break;
			case T__30:
				{
				State = 222; tableconstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 253;
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 225;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 226; operatorPower();
						State = 227; exp(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 229;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 230; operatorMulDivMod();
						State = 231; exp(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 233;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 234; operatorAddSub();
						State = 235; exp(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 237;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 238; operatorStrcat();
						State = 239; exp(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 241;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 242; operatorComparison();
						State = 243; exp(4);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 245;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 246; operatorAnd();
						State = 247; exp(3);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 249;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 250; operatorOr();
						State = 251; exp(2);
						}
						break;
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 20, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			switch (TokenStream.La(1)) {
			case NAME:
				{
				State = 258; Match(NAME);
				}
				break;
			case T__26:
				{
				State = 259; Match(T__26);
				State = 260; exp(0);
				State = 261; Match(T__27);
				State = 262; varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 266; varSuffix();
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 22, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; varOrExp();
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 273; nameAndArgs();
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 24, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; varOrExp();
			State = 281;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 280; nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_varOrExp);
		try {
			State = 290;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286; Match(T__26);
				State = 287; exp(0);
				State = 288; Match(T__27);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
		EnterRule(_localctx, 28, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			_la = TokenStream.La(1);
			if (_la==T__21) {
				{
				State = 292; Match(T__21);
				State = 293; Match(NAME);
				}
			}

			State = 296; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(Context, State);
		EnterRule(_localctx, 30, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__26) | (1L << T__30) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 298; nameAndArgs();
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 310;
			switch (TokenStream.La(1)) {
			case T__28:
				{
				State = 304; Match(T__28);
				State = 305; exp(0);
				State = 306; Match(T__29);
				}
				break;
			case T__20:
				{
				State = 308; Match(T__20);
				State = 309; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 32, RULE_args);
		int _la;
		try {
			State = 319;
			switch (TokenStream.La(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; Match(T__26);
				State = 314;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__30) | (1L << T__42) | (1L << T__46) | (1L << T__47) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 313; explist();
					}
				}

				State = 316; Match(T__27);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317; tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 34, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(T__16);
			State = 322; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(T__26);
			State = 326;
			_la = TokenStream.La(1);
			if (_la==T__25 || _la==NAME) {
				{
				State = 325; parlist();
				}
			}

			State = 328; Match(T__27);
			State = 329; block();
			State = 330; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 38, RULE_parlist);
		int _la;
		try {
			State = 338;
			switch (TokenStream.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332; namelist();
				State = 335;
				_la = TokenStream.La(1);
				if (_la==T__14) {
					{
					State = 333; Match(T__14);
					State = 334; Match(T__25);
					}
				}

				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 40, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(T__30);
			State = 342;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__30) | (1L << T__42) | (1L << T__46) | (1L << T__47) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 341; fieldlist();
				}
			}

			State = 344; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 42, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; field();
			State = 352;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 347; fieldsep();
					State = 348; field();
					}
					} 
				}
				State = 354;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 356;
			_la = TokenStream.La(1);
			if (_la==T__0 || _la==T__14) {
				{
				State = 355; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 44, RULE_field);
		try {
			State = 368;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358; Match(T__28);
				State = 359; exp(0);
				State = 360; Match(T__29);
				State = 361; Match(T__1);
				State = 362; exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364; Match(NAME);
				State = 365; Match(T__1);
				State = 366; exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 367; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 46, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_la = TokenStream.La(1);
			if ( !(_la==T__0 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 48, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 50, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 52, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 54, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 56, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			_la = TokenStream.La(1);
			if ( !(_la==T__41 || _la==T__42) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 58, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__45))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 60, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__42) | (1L << T__46) | (1L << T__47))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
		EnterRule(_localctx, 62, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(LuaParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(LuaParser.HEX, 0); }
		public ITerminalNode FLOAT() { return GetToken(LuaParser.FLOAT, 0); }
		public ITerminalNode HEX_FLOAT() { return GetToken(LuaParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 64, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(LuaParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(LuaParser.CHARSTRING, 0); }
		public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 66, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3?\x18B\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\x3\x2\x3\x2\x3\x3\a\x3K\n\x3\f\x3\xE\x3N\v\x3"+
		"\x3\x3\x5\x3Q\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\a\x4u\n\x4\f\x4\xE\x4x\v\x4\x3\x4\x3\x4\x5\x4|\n\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x88\n"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x5\x4\xA2\n\x4\x5\x4\xA4\n\x4\x3\x5\x3\x5\x5\x5\xA8\n\x5\x3"+
		"\x5\x5\x5\xAB\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xB4\n\a"+
		"\f\a\xE\a\xB7\v\a\x3\a\x3\a\x5\a\xBB\n\a\x3\b\x3\b\x3\b\a\b\xC0\n\b\f"+
		"\b\xE\b\xC3\v\b\x3\t\x3\t\x3\t\a\t\xC8\n\t\f\t\xE\t\xCB\v\t\x3\n\x3\n"+
		"\x3\n\a\n\xD0\n\n\f\n\xE\n\xD3\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xE2\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x100\n\v\f\v\xE\v\x103"+
		"\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x10B\n\f\x3\f\a\f\x10E\n\f\f\f"+
		"\xE\f\x111\v\f\x3\r\x3\r\a\r\x115\n\r\f\r\xE\r\x118\v\r\x3\xE\x3\xE\x6"+
		"\xE\x11C\n\xE\r\xE\xE\xE\x11D\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x125"+
		"\n\xF\x3\x10\x3\x10\x5\x10\x129\n\x10\x3\x10\x3\x10\x3\x11\a\x11\x12E"+
		"\n\x11\f\x11\xE\x11\x131\v\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x5\x11\x139\n\x11\x3\x12\x3\x12\x5\x12\x13D\n\x12\x3\x12\x3\x12\x3\x12"+
		"\x5\x12\x142\n\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14\x149\n\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5\x15\x152\n\x15\x3"+
		"\x15\x5\x15\x155\n\x15\x3\x16\x3\x16\x5\x16\x159\n\x16\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\a\x17\x161\n\x17\f\x17\xE\x17\x164\v\x17\x3"+
		"\x17\x5\x17\x167\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\x173\n\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3"+
		" \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x2\x3\x14$\x2\x4\x6\b\n\f\xE\x10\x12"+
		"\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x2\t"+
		"\x4\x2\x3\x3\x11\x11\x3\x2%*\x3\x2,-\x3\x2.\x30\x4\x2--\x31\x32\x3\x2"+
		"\x38;\x3\x2\x35\x37\x1A6\x2\x46\x3\x2\x2\x2\x4L\x3\x2\x2\x2\x6\xA3\x3"+
		"\x2\x2\x2\b\xA5\x3\x2\x2\x2\n\xAC\x3\x2\x2\x2\f\xB0\x3\x2\x2\x2\xE\xBC"+
		"\x3\x2\x2\x2\x10\xC4\x3\x2\x2\x2\x12\xCC\x3\x2\x2\x2\x14\xE1\x3\x2\x2"+
		"\x2\x16\x10A\x3\x2\x2\x2\x18\x112\x3\x2\x2\x2\x1A\x119\x3\x2\x2\x2\x1C"+
		"\x124\x3\x2\x2\x2\x1E\x128\x3\x2\x2\x2 \x12F\x3\x2\x2\x2\"\x141\x3\x2"+
		"\x2\x2$\x143\x3\x2\x2\x2&\x146\x3\x2\x2\x2(\x154\x3\x2\x2\x2*\x156\x3"+
		"\x2\x2\x2,\x15C\x3\x2\x2\x2.\x172\x3\x2\x2\x2\x30\x174\x3\x2\x2\x2\x32"+
		"\x176\x3\x2\x2\x2\x34\x178\x3\x2\x2\x2\x36\x17A\x3\x2\x2\x2\x38\x17C\x3"+
		"\x2\x2\x2:\x17E\x3\x2\x2\x2<\x180\x3\x2\x2\x2>\x182\x3\x2\x2\x2@\x184"+
		"\x3\x2\x2\x2\x42\x186\x3\x2\x2\x2\x44\x188\x3\x2\x2\x2\x46G\x5\x4\x3\x2"+
		"GH\a\x2\x2\x3H\x3\x3\x2\x2\x2IK\x5\x6\x4\x2JI\x3\x2\x2\x2KN\x3\x2\x2\x2"+
		"LJ\x3\x2\x2\x2LM\x3\x2\x2\x2MP\x3\x2\x2\x2NL\x3\x2\x2\x2OQ\x5\b\x5\x2"+
		"PO\x3\x2\x2\x2PQ\x3\x2\x2\x2Q\x5\x3\x2\x2\x2R\xA4\a\x3\x2\x2ST\x5\xE\b"+
		"\x2TU\a\x4\x2\x2UV\x5\x12\n\x2V\xA4\x3\x2\x2\x2W\xA4\x5\x1A\xE\x2X\xA4"+
		"\x5\n\x6\x2Y\xA4\a\x5\x2\x2Z[\a\x6\x2\x2[\xA4\a\x34\x2\x2\\]\a\a\x2\x2"+
		"]^\x5\x4\x3\x2^_\a\b\x2\x2_\xA4\x3\x2\x2\x2`\x61\a\t\x2\x2\x61\x62\x5"+
		"\x14\v\x2\x62\x63\a\a\x2\x2\x63\x64\x5\x4\x3\x2\x64\x65\a\b\x2\x2\x65"+
		"\xA4\x3\x2\x2\x2\x66g\a\n\x2\x2gh\x5\x4\x3\x2hi\a\v\x2\x2ij\x5\x14\v\x2"+
		"j\xA4\x3\x2\x2\x2kl\a\f\x2\x2lm\x5\x14\v\x2mn\a\r\x2\x2nv\x5\x4\x3\x2"+
		"op\a\xE\x2\x2pq\x5\x14\v\x2qr\a\r\x2\x2rs\x5\x4\x3\x2su\x3\x2\x2\x2to"+
		"\x3\x2\x2\x2ux\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2\x2w{\x3\x2\x2\x2x"+
		"v\x3\x2\x2\x2yz\a\xF\x2\x2z|\x5\x4\x3\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|"+
		"}\x3\x2\x2\x2}~\a\b\x2\x2~\xA4\x3\x2\x2\x2\x7F\x80\a\x10\x2\x2\x80\x81"+
		"\a\x34\x2\x2\x81\x82\a\x4\x2\x2\x82\x83\x5\x14\v\x2\x83\x84\a\x11\x2\x2"+
		"\x84\x87\x5\x14\v\x2\x85\x86\a\x11\x2\x2\x86\x88\x5\x14\v\x2\x87\x85\x3"+
		"\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8A\a\a\x2\x2\x8A"+
		"\x8B\x5\x4\x3\x2\x8B\x8C\a\b\x2\x2\x8C\xA4\x3\x2\x2\x2\x8D\x8E\a\x10\x2"+
		"\x2\x8E\x8F\x5\x10\t\x2\x8F\x90\a\x12\x2\x2\x90\x91\x5\x12\n\x2\x91\x92"+
		"\a\a\x2\x2\x92\x93\x5\x4\x3\x2\x93\x94\a\b\x2\x2\x94\xA4\x3\x2\x2\x2\x95"+
		"\x96\a\x13\x2\x2\x96\x97\x5\f\a\x2\x97\x98\x5&\x14\x2\x98\xA4\x3\x2\x2"+
		"\x2\x99\x9A\a\x14\x2\x2\x9A\x9B\a\x13\x2\x2\x9B\x9C\a\x34\x2\x2\x9C\xA4"+
		"\x5&\x14\x2\x9D\x9E\a\x14\x2\x2\x9E\xA1\x5\x10\t\x2\x9F\xA0\a\x4\x2\x2"+
		"\xA0\xA2\x5\x12\n\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3"+
		"\x2\x2\x2\xA3R\x3\x2\x2\x2\xA3S\x3\x2\x2\x2\xA3W\x3\x2\x2\x2\xA3X\x3\x2"+
		"\x2\x2\xA3Y\x3\x2\x2\x2\xA3Z\x3\x2\x2\x2\xA3\\\x3\x2\x2\x2\xA3`\x3\x2"+
		"\x2\x2\xA3\x66\x3\x2\x2\x2\xA3k\x3\x2\x2\x2\xA3\x7F\x3\x2\x2\x2\xA3\x8D"+
		"\x3\x2\x2\x2\xA3\x95\x3\x2\x2\x2\xA3\x99\x3\x2\x2\x2\xA3\x9D\x3\x2\x2"+
		"\x2\xA4\a\x3\x2\x2\x2\xA5\xA7\a\x15\x2\x2\xA6\xA8\x5\x12\n\x2\xA7\xA6"+
		"\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xAA\x3\x2\x2\x2\xA9\xAB\a\x3\x2\x2"+
		"\xAA\xA9\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\t\x3\x2\x2\x2\xAC\xAD\a\x16"+
		"\x2\x2\xAD\xAE\a\x34\x2\x2\xAE\xAF\a\x16\x2\x2\xAF\v\x3\x2\x2\x2\xB0\xB5"+
		"\a\x34\x2\x2\xB1\xB2\a\x17\x2\x2\xB2\xB4\a\x34\x2\x2\xB3\xB1\x3\x2\x2"+
		"\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xBA"+
		"\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xB9\a\x18\x2\x2\xB9\xBB\a\x34\x2"+
		"\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\r\x3\x2\x2\x2\xBC\xC1"+
		"\x5\x16\f\x2\xBD\xBE\a\x11\x2\x2\xBE\xC0\x5\x16\f\x2\xBF\xBD\x3\x2\x2"+
		"\x2\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xF"+
		"\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xC9\a\x34\x2\x2\xC5\xC6\a\x11\x2"+
		"\x2\xC6\xC8\a\x34\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xCB\x3\x2\x2\x2\xC9\xC7"+
		"\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\x11\x3\x2\x2\x2\xCB\xC9\x3\x2\x2"+
		"\x2\xCC\xD1\x5\x14\v\x2\xCD\xCE\a\x11\x2\x2\xCE\xD0\x5\x14\v\x2\xCF\xCD"+
		"\x3\x2\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2"+
		"\x2\xD2\x13\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD5\b\v\x1\x2\xD5\xD6"+
		"\x5> \x2\xD6\xD7\x5\x14\v\t\xD7\xE2\x3\x2\x2\x2\xD8\xE2\a\x19\x2\x2\xD9"+
		"\xE2\a\x1A\x2\x2\xDA\xE2\a\x1B\x2\x2\xDB\xE2\x5\x42\"\x2\xDC\xE2\x5\x44"+
		"#\x2\xDD\xE2\a\x1C\x2\x2\xDE\xE2\x5$\x13\x2\xDF\xE2\x5\x18\r\x2\xE0\xE2"+
		"\x5*\x16\x2\xE1\xD4\x3\x2\x2\x2\xE1\xD8\x3\x2\x2\x2\xE1\xD9\x3\x2\x2\x2"+
		"\xE1\xDA\x3\x2\x2\x2\xE1\xDB\x3\x2\x2\x2\xE1\xDC\x3\x2\x2\x2\xE1\xDD\x3"+
		"\x2\x2\x2\xE1\xDE\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE0\x3\x2\x2\x2"+
		"\xE2\x101\x3\x2\x2\x2\xE3\xE4\f\n\x2\x2\xE4\xE5\x5@!\x2\xE5\xE6\x5\x14"+
		"\v\n\xE6\x100\x3\x2\x2\x2\xE7\xE8\f\b\x2\x2\xE8\xE9\x5<\x1F\x2\xE9\xEA"+
		"\x5\x14\v\t\xEA\x100\x3\x2\x2\x2\xEB\xEC\f\a\x2\x2\xEC\xED\x5:\x1E\x2"+
		"\xED\xEE\x5\x14\v\b\xEE\x100\x3\x2\x2\x2\xEF\xF0\f\x6\x2\x2\xF0\xF1\x5"+
		"\x38\x1D\x2\xF1\xF2\x5\x14\v\x6\xF2\x100\x3\x2\x2\x2\xF3\xF4\f\x5\x2\x2"+
		"\xF4\xF5\x5\x36\x1C\x2\xF5\xF6\x5\x14\v\x6\xF6\x100\x3\x2\x2\x2\xF7\xF8"+
		"\f\x4\x2\x2\xF8\xF9\x5\x34\x1B\x2\xF9\xFA\x5\x14\v\x5\xFA\x100\x3\x2\x2"+
		"\x2\xFB\xFC\f\x3\x2\x2\xFC\xFD\x5\x32\x1A\x2\xFD\xFE\x5\x14\v\x4\xFE\x100"+
		"\x3\x2\x2\x2\xFF\xE3\x3\x2\x2\x2\xFF\xE7\x3\x2\x2\x2\xFF\xEB\x3\x2\x2"+
		"\x2\xFF\xEF\x3\x2\x2\x2\xFF\xF3\x3\x2\x2\x2\xFF\xF7\x3\x2\x2\x2\xFF\xFB"+
		"\x3\x2\x2\x2\x100\x103\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102\x3\x2"+
		"\x2\x2\x102\x15\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x10B\a\x34\x2\x2"+
		"\x105\x106\a\x1D\x2\x2\x106\x107\x5\x14\v\x2\x107\x108\a\x1E\x2\x2\x108"+
		"\x109\x5 \x11\x2\x109\x10B\x3\x2\x2\x2\x10A\x104\x3\x2\x2\x2\x10A\x105"+
		"\x3\x2\x2\x2\x10B\x10F\x3\x2\x2\x2\x10C\x10E\x5 \x11\x2\x10D\x10C\x3\x2"+
		"\x2\x2\x10E\x111\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2"+
		"\x2\x110\x17\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x112\x116\x5\x1C\xF\x2"+
		"\x113\x115\x5\x1E\x10\x2\x114\x113\x3\x2\x2\x2\x115\x118\x3\x2\x2\x2\x116"+
		"\x114\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x19\x3\x2\x2\x2\x118\x116"+
		"\x3\x2\x2\x2\x119\x11B\x5\x1C\xF\x2\x11A\x11C\x5\x1E\x10\x2\x11B\x11A"+
		"\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11E\x3"+
		"\x2\x2\x2\x11E\x1B\x3\x2\x2\x2\x11F\x125\x5\x16\f\x2\x120\x121\a\x1D\x2"+
		"\x2\x121\x122\x5\x14\v\x2\x122\x123\a\x1E\x2\x2\x123\x125\x3\x2\x2\x2"+
		"\x124\x11F\x3\x2\x2\x2\x124\x120\x3\x2\x2\x2\x125\x1D\x3\x2\x2\x2\x126"+
		"\x127\a\x18\x2\x2\x127\x129\a\x34\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129"+
		"\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12B\x5\"\x12\x2\x12B\x1F\x3\x2"+
		"\x2\x2\x12C\x12E\x5\x1E\x10\x2\x12D\x12C\x3\x2\x2\x2\x12E\x131\x3\x2\x2"+
		"\x2\x12F\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x138\x3\x2\x2\x2"+
		"\x131\x12F\x3\x2\x2\x2\x132\x133\a\x1F\x2\x2\x133\x134\x5\x14\v\x2\x134"+
		"\x135\a \x2\x2\x135\x139\x3\x2\x2\x2\x136\x137\a\x17\x2\x2\x137\x139\a"+
		"\x34\x2\x2\x138\x132\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x139!\x3\x2\x2"+
		"\x2\x13A\x13C\a\x1D\x2\x2\x13B\x13D\x5\x12\n\x2\x13C\x13B\x3\x2\x2\x2"+
		"\x13C\x13D\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x142\a\x1E\x2\x2\x13F"+
		"\x142\x5*\x16\x2\x140\x142\x5\x44#\x2\x141\x13A\x3\x2\x2\x2\x141\x13F"+
		"\x3\x2\x2\x2\x141\x140\x3\x2\x2\x2\x142#\x3\x2\x2\x2\x143\x144\a\x13\x2"+
		"\x2\x144\x145\x5&\x14\x2\x145%\x3\x2\x2\x2\x146\x148\a\x1D\x2\x2\x147"+
		"\x149\x5(\x15\x2\x148\x147\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14A"+
		"\x3\x2\x2\x2\x14A\x14B\a\x1E\x2\x2\x14B\x14C\x5\x4\x3\x2\x14C\x14D\a\b"+
		"\x2\x2\x14D\'\x3\x2\x2\x2\x14E\x151\x5\x10\t\x2\x14F\x150\a\x11\x2\x2"+
		"\x150\x152\a\x1C\x2\x2\x151\x14F\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152"+
		"\x155\x3\x2\x2\x2\x153\x155\a\x1C\x2\x2\x154\x14E\x3\x2\x2\x2\x154\x153"+
		"\x3\x2\x2\x2\x155)\x3\x2\x2\x2\x156\x158\a!\x2\x2\x157\x159\x5,\x17\x2"+
		"\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A"+
		"\x15B\a\"\x2\x2\x15B+\x3\x2\x2\x2\x15C\x162\x5.\x18\x2\x15D\x15E\x5\x30"+
		"\x19\x2\x15E\x15F\x5.\x18\x2\x15F\x161\x3\x2\x2\x2\x160\x15D\x3\x2\x2"+
		"\x2\x161\x164\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2"+
		"\x163\x166\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x165\x167\x5\x30\x19\x2\x166"+
		"\x165\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167-\x3\x2\x2\x2\x168\x169\a"+
		"\x1F\x2\x2\x169\x16A\x5\x14\v\x2\x16A\x16B\a \x2\x2\x16B\x16C\a\x4\x2"+
		"\x2\x16C\x16D\x5\x14\v\x2\x16D\x173\x3\x2\x2\x2\x16E\x16F\a\x34\x2\x2"+
		"\x16F\x170\a\x4\x2\x2\x170\x173\x5\x14\v\x2\x171\x173\x5\x14\v\x2\x172"+
		"\x168\x3\x2\x2\x2\x172\x16E\x3\x2\x2\x2\x172\x171\x3\x2\x2\x2\x173/\x3"+
		"\x2\x2\x2\x174\x175\t\x2\x2\x2\x175\x31\x3\x2\x2\x2\x176\x177\a#\x2\x2"+
		"\x177\x33\x3\x2\x2\x2\x178\x179\a$\x2\x2\x179\x35\x3\x2\x2\x2\x17A\x17B"+
		"\t\x3\x2\x2\x17B\x37\x3\x2\x2\x2\x17C\x17D\a+\x2\x2\x17D\x39\x3\x2\x2"+
		"\x2\x17E\x17F\t\x4\x2\x2\x17F;\x3\x2\x2\x2\x180\x181\t\x5\x2\x2\x181="+
		"\x3\x2\x2\x2\x182\x183\t\x6\x2\x2\x183?\x3\x2\x2\x2\x184\x185\a\x33\x2"+
		"\x2\x185\x41\x3\x2\x2\x2\x186\x187\t\a\x2\x2\x187\x43\x3\x2\x2\x2\x188"+
		"\x189\t\b\x2\x2\x189\x45\x3\x2\x2\x2$LPv{\x87\xA1\xA3\xA7\xAA\xB5\xBA"+
		"\xC1\xC9\xD1\xE1\xFF\x101\x10A\x10F\x116\x11D\x124\x128\x12F\x138\x13C"+
		"\x141\x148\x151\x154\x158\x162\x166\x172";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CppParser
